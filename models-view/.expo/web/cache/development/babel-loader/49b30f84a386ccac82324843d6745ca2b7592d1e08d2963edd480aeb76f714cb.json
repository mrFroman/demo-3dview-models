{"ast":null,"code":"#!/usr/bin/env node\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst root = process.cwd();\nconst oldDirs = [\"app\", \"components\", \"hooks\", \"constants\", \"scripts\"];\nconst newDir = \"app-example\";\nconst newAppDir = \"app\";\nconst newDirPath = path.join(root, newDir);\nconst indexContent = `import { Text, View } from \"react-native\";\n\nexport default function Index() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Edit app/index.tsx to edit this screen.</Text>\n    </View>\n  );\n}\n`;\nconst layoutContent = `import { Stack } from \"expo-router\";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n`;\nconst moveDirectories = async () => {\n  try {\n    await fs.promises.mkdir(newDirPath, {\n      recursive: true\n    });\n    console.log(`üìÅ /${newDir} directory created.`);\n    for (const dir of oldDirs) {\n      const oldDirPath = path.join(root, dir);\n      const newDirPath = path.join(root, newDir, dir);\n      if (fs.existsSync(oldDirPath)) {\n        await fs.promises.rename(oldDirPath, newDirPath);\n        console.log(`‚û°Ô∏è /${dir} moved to /${newDir}/${dir}.`);\n      } else {\n        console.log(`‚û°Ô∏è /${dir} does not exist, skipping.`);\n      }\n    }\n    const newAppDirPath = path.join(root, newAppDir);\n    await fs.promises.mkdir(newAppDirPath, {\n      recursive: true\n    });\n    console.log(\"\\nüìÅ New /app directory created.\");\n    const indexPath = path.join(newAppDirPath, \"index.tsx\");\n    await fs.promises.writeFile(indexPath, indexContent);\n    console.log(\"üìÑ app/index.tsx created.\");\n    const layoutPath = path.join(newAppDirPath, \"_layout.tsx\");\n    await fs.promises.writeFile(layoutPath, layoutContent);\n    console.log(\"üìÑ app/_layout.tsx created.\");\n    console.log(\"\\n‚úÖ Project reset complete. Next steps:\");\n    console.log(\"1. Run `npx expo start` to start a development server.\\n2. Edit app/index.tsx to edit the main screen.\\n3. Delete the /app-example directory when you're done referencing it.\");\n  } catch (error) {\n    console.error(`Error during script execution: ${error}`);\n  }\n};\nmoveDirectories();","map":{"version":3,"names":["fs","require","path","root","process","cwd","oldDirs","newDir","newAppDir","newDirPath","join","indexContent","layoutContent","moveDirectories","promises","mkdir","recursive","console","log","dir","oldDirPath","existsSync","rename","newAppDirPath","indexPath","writeFile","layoutPath","error"],"sources":["/app/app-example/scripts/reset-project.js"],"sourcesContent":["#!/usr/bin/env node\n\n/**\n * This script is used to reset the project to a blank state.\n * It moves the /app, /components, /hooks, /scripts, and /constants directories to /app-example and creates a new /app directory with an index.tsx and _layout.tsx file.\n * You can remove the `reset-project` script from package.json and safely delete this file after running it.\n */\n\nconst fs = require(\"fs\");\nconst path = require(\"path\");\n\nconst root = process.cwd();\nconst oldDirs = [\"app\", \"components\", \"hooks\", \"constants\", \"scripts\"];\nconst newDir = \"app-example\";\nconst newAppDir = \"app\";\nconst newDirPath = path.join(root, newDir);\n\nconst indexContent = `import { Text, View } from \"react-native\";\n\nexport default function Index() {\n  return (\n    <View\n      style={{\n        flex: 1,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <Text>Edit app/index.tsx to edit this screen.</Text>\n    </View>\n  );\n}\n`;\n\nconst layoutContent = `import { Stack } from \"expo-router\";\n\nexport default function RootLayout() {\n  return <Stack />;\n}\n`;\n\nconst moveDirectories = async () => {\n  try {\n    // Create the app-example directory\n    await fs.promises.mkdir(newDirPath, { recursive: true });\n    console.log(`üìÅ /${newDir} directory created.`);\n\n    // Move old directories to new app-example directory\n    for (const dir of oldDirs) {\n      const oldDirPath = path.join(root, dir);\n      const newDirPath = path.join(root, newDir, dir);\n      if (fs.existsSync(oldDirPath)) {\n        await fs.promises.rename(oldDirPath, newDirPath);\n        console.log(`‚û°Ô∏è /${dir} moved to /${newDir}/${dir}.`);\n      } else {\n        console.log(`‚û°Ô∏è /${dir} does not exist, skipping.`);\n      }\n    }\n\n    // Create new /app directory\n    const newAppDirPath = path.join(root, newAppDir);\n    await fs.promises.mkdir(newAppDirPath, { recursive: true });\n    console.log(\"\\nüìÅ New /app directory created.\");\n\n    // Create index.tsx\n    const indexPath = path.join(newAppDirPath, \"index.tsx\");\n    await fs.promises.writeFile(indexPath, indexContent);\n    console.log(\"üìÑ app/index.tsx created.\");\n\n    // Create _layout.tsx\n    const layoutPath = path.join(newAppDirPath, \"_layout.tsx\");\n    await fs.promises.writeFile(layoutPath, layoutContent);\n    console.log(\"üìÑ app/_layout.tsx created.\");\n\n    console.log(\"\\n‚úÖ Project reset complete. Next steps:\");\n    console.log(\n      \"1. Run `npx expo start` to start a development server.\\n2. Edit app/index.tsx to edit the main screen.\\n3. Delete the /app-example directory when you're done referencing it.\"\n    );\n  } catch (error) {\n    console.error(`Error during script execution: ${error}`);\n  }\n};\n\nmoveDirectories();\n"],"mappings":"AAAA;AAQA,MAAMA,EAAE,GAAGC,OAAO,CAAC,IAAI,CAAC;AACxB,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAME,IAAI,GAAGC,OAAO,CAACC,GAAG,CAAC,CAAC;AAC1B,MAAMC,OAAO,GAAG,CAAC,KAAK,EAAE,YAAY,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,CAAC;AACtE,MAAMC,MAAM,GAAG,aAAa;AAC5B,MAAMC,SAAS,GAAG,KAAK;AACvB,MAAMC,UAAU,GAAGP,IAAI,CAACQ,IAAI,CAACP,IAAI,EAAEI,MAAM,CAAC;AAE1C,MAAMI,YAAY,GAAG;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,aAAa,GAAG;AACtB;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EAClC,IAAI;IAEF,MAAMb,EAAE,CAACc,QAAQ,CAACC,KAAK,CAACN,UAAU,EAAE;MAAEO,SAAS,EAAE;IAAK,CAAC,CAAC;IACxDC,OAAO,CAACC,GAAG,CAAC,OAAOX,MAAM,qBAAqB,CAAC;IAG/C,KAAK,MAAMY,GAAG,IAAIb,OAAO,EAAE;MACzB,MAAMc,UAAU,GAAGlB,IAAI,CAACQ,IAAI,CAACP,IAAI,EAAEgB,GAAG,CAAC;MACvC,MAAMV,UAAU,GAAGP,IAAI,CAACQ,IAAI,CAACP,IAAI,EAAEI,MAAM,EAAEY,GAAG,CAAC;MAC/C,IAAInB,EAAE,CAACqB,UAAU,CAACD,UAAU,CAAC,EAAE;QAC7B,MAAMpB,EAAE,CAACc,QAAQ,CAACQ,MAAM,CAACF,UAAU,EAAEX,UAAU,CAAC;QAChDQ,OAAO,CAACC,GAAG,CAAC,OAAOC,GAAG,cAAcZ,MAAM,IAAIY,GAAG,GAAG,CAAC;MACvD,CAAC,MAAM;QACLF,OAAO,CAACC,GAAG,CAAC,OAAOC,GAAG,4BAA4B,CAAC;MACrD;IACF;IAGA,MAAMI,aAAa,GAAGrB,IAAI,CAACQ,IAAI,CAACP,IAAI,EAAEK,SAAS,CAAC;IAChD,MAAMR,EAAE,CAACc,QAAQ,CAACC,KAAK,CAACQ,aAAa,EAAE;MAAEP,SAAS,EAAE;IAAK,CAAC,CAAC;IAC3DC,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAG/C,MAAMM,SAAS,GAAGtB,IAAI,CAACQ,IAAI,CAACa,aAAa,EAAE,WAAW,CAAC;IACvD,MAAMvB,EAAE,CAACc,QAAQ,CAACW,SAAS,CAACD,SAAS,EAAEb,YAAY,CAAC;IACpDM,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAGxC,MAAMQ,UAAU,GAAGxB,IAAI,CAACQ,IAAI,CAACa,aAAa,EAAE,aAAa,CAAC;IAC1D,MAAMvB,EAAE,CAACc,QAAQ,CAACW,SAAS,CAACC,UAAU,EAAEd,aAAa,CAAC;IACtDK,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAE1CD,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDD,OAAO,CAACC,GAAG,CACT,+KACF,CAAC;EACH,CAAC,CAAC,OAAOS,KAAK,EAAE;IACdV,OAAO,CAACU,KAAK,CAAC,kCAAkCA,KAAK,EAAE,CAAC;EAC1D;AACF,CAAC;AAEDd,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"script","externalDependencies":[]}