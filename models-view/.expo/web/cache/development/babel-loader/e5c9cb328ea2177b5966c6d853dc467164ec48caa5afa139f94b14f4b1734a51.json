{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\nexport async function notificationAsync(type = NotificationFeedbackType.Success) {\n  if (!ExpoHaptics?.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\nexport async function impactAsync(style = ImpactFeedbackStyle.Medium) {\n  if (!ExpoHaptics?.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\nexport async function selectionAsync() {\n  if (!ExpoHaptics?.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"names":["UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","notificationAsync","type","Success","impactAsync","style","Medium","selectionAsync"],"sources":["/app/node_modules/expo-haptics/src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics?.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics?.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics?.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"mappings":"AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,WAAW,MAAM,eAAe;AACvC,SAASC,wBAAwB,EAAEC,mBAAmB,QAAQ,iBAAiB;AAU/E,OAAO,eAAeC,iBAAiBA,CACrCC,IAA8B,GAAGH,wBAAwB,CAACI,OAAO,EAClD;EACf,IAAI,CAACL,WAAW,EAAEG,iBAAiB,EAAE;IACnC,MAAM,IAAIJ,mBAAmB,CAAC,SAAS,EAAE,mBAAmB,CAAC;EAC/D;EACA,MAAMC,WAAW,CAACG,iBAAiB,CAACC,IAAI,CAAC;AAC3C;AASA,OAAO,eAAeE,WAAWA,CAC/BC,KAA0B,GAAGL,mBAAmB,CAACM,MAAM,EACxC;EACf,IAAI,CAACR,WAAW,EAAEM,WAAW,EAAE;IAC7B,MAAM,IAAIP,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC;EACxD;EACA,MAAMC,WAAW,CAACM,WAAW,CAACC,KAAK,CAAC;AACtC;AAOA,OAAO,eAAeE,cAAcA,CAAA,EAAkB;EACpD,IAAI,CAACT,WAAW,EAAES,cAAc,EAAE;IAChC,MAAM,IAAIV,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC;EAC3D;EACA,MAAMC,WAAW,CAACS,cAAc,CAAC,CAAC;AACpC;AAEA,SAASR,wBAAwB,EAAEC,mBAAmB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}