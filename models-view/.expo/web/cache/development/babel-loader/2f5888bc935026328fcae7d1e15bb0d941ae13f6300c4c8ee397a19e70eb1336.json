{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StackActions = void 0;\nexports.StackRouter = StackRouter;\nvar _nonSecure = require(\"nanoid/non-secure\");\nvar _BaseRouter = require(\"./BaseRouter.js\");\nconst StackActions = exports.StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n  pop(count = 1) {\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  },\n  popTo(name, params, merge) {\n    return {\n      type: 'POP_TO',\n      payload: {\n        name,\n        params,\n        merge\n      }\n    };\n  }\n};\nfunction StackRouter(options) {\n  const router = Object.assign({}, _BaseRouter.BaseRouter, {\n    type: 'stack',\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${(0, _nonSecure.nanoid)()}`,\n        index: 0,\n        routeNames,\n        preloadedRoutes: [],\n        routes: [{\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      const state = partialState;\n      if (state.stale === false) {\n        return state;\n      }\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => Object.assign({}, route, {\n        key: route.key || `${route.name}-${(0, _nonSecure.nanoid)()}`,\n        params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params\n      }));\n      const preloadedRoutes = state.preloadedRoutes?.filter(route => routeNames.includes(route.name)).map(route => Object.assign({}, route, {\n        key: route.key || `${route.name}-${(0, _nonSecure.nanoid)()}`,\n        params: routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params) : route.params\n      })) ?? [];\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${(0, _nonSecure.nanoid)()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n        preloadedRoutes\n      };\n    },\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeKeyChanges\n    }) {\n      const routes = state.routes.filter(route => routeNames.includes(route.name) && !routeKeyChanges.includes(route.name));\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: `${initialRouteName}-${(0, _nonSecure.nanoid)()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n      return Object.assign({}, state, {\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n      return Object.assign({}, state, {\n        index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n    getStateForAction(state, action, options) {\n      const {\n        routeParamList\n      } = options;\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index === -1) {\n              return null;\n            }\n            const {\n              name,\n              params\n            } = action.payload;\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n            return Object.assign({}, state, {\n              routes: state.routes.map((route, i) => i === index ? {\n                key: `${name}-${(0, _nonSecure.nanoid)()}`,\n                name,\n                params: routeParamList[name] !== undefined ? Object.assign({}, routeParamList[name], params) : params\n              } : route)\n            });\n          }\n        case 'PUSH':\n        case 'NAVIGATE':\n          {\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({\n              params: action.payload.params\n            });\n            let route;\n            if (id !== undefined) {\n              route = state.routes.find(route => route.name === action.payload.name && id === getId?.({\n                params: route.params\n              }));\n            } else {\n              const currentRoute = state.routes[state.index];\n              if (action.type === 'NAVIGATE' && action.payload.name === currentRoute.name) {\n                route = currentRoute;\n              }\n            }\n            if (!route) {\n              route = state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n                params: route.params\n              }));\n            }\n            let params;\n            if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n              params = action.payload.params !== undefined || routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], route.params, action.payload.params) : route.params;\n            } else {\n              params = routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params;\n            }\n            let routes;\n            if (route) {\n              const routeKey = route.key;\n              routes = state.routes.filter(r => r.key !== routeKey);\n              routes.push(Object.assign({}, route, {\n                path: action.type === 'NAVIGATE' && action.payload.path !== undefined ? action.payload.path : route.path,\n                params\n              }));\n            } else {\n              routes = [...state.routes, {\n                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                name: action.payload.name,\n                path: action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                params\n              }];\n            }\n            return Object.assign({}, state, {\n              index: routes.length - 1,\n              preloadedRoutes: state.preloadedRoutes.filter(route => routes[routes.length - 1].key !== route.key),\n              routes\n            });\n          }\n        case 'NAVIGATE_DEPRECATED':\n          {\n            if (state.preloadedRoutes.find(route => route.name === action.payload.name && id === getId?.({\n              params: route.params\n            }))) {\n              return null;\n            }\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n            let index = -1;\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === getId?.({\n                params: route.params\n              }));\n            } else if (state.routes[state.index].name === action.payload.name) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1) {\n              const routes = [...state.routes, {\n                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }];\n              return Object.assign({}, state, {\n                routes,\n                index: routes.length - 1\n              });\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n            }\n            return Object.assign({}, state, {\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params ? Object.assign({}, route, {\n                params\n              }) : state.routes[index]]\n            });\n          }\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return Object.assign({}, state, {\n                index: routes.length - 1,\n                routes\n              });\n            }\n            return null;\n          }\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n        case 'POP_TO':\n          {\n            if (!state.routeNames.includes(action.payload.name)) {\n              return null;\n            }\n            let index = -1;\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({\n              params: action.payload.params\n            });\n            if (id) {\n              index = state.routes.findIndex(route => route.name === action.payload.name && id === getId?.({\n                params: route.params\n              }));\n            } else if (state.routes[state.index].name === action.payload.name) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n            if (index === -1) {\n              const routes = [...state.routes.slice(0, -1), {\n                key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n              }];\n              return Object.assign({}, state, {\n                routes,\n                index: routes.length - 1\n              });\n            }\n            const route = state.routes[index];\n            let params;\n            if (action.payload.merge) {\n              params = action.payload.params !== undefined || routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], route.params, action.payload.params) : route.params;\n            } else {\n              params = routeParamList[route.name] !== undefined ? Object.assign({}, routeParamList[route.name], action.payload.params) : action.payload.params;\n            }\n            return Object.assign({}, state, {\n              index,\n              routes: [...state.routes.slice(0, index), params !== route.params ? Object.assign({}, route, {\n                params\n              }) : state.routes[index]]\n            });\n          }\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n          return null;\n        case 'PRELOAD':\n          {\n            const getId = options.routeGetIdList[action.payload.name];\n            const id = getId?.({\n              params: action.payload.params\n            });\n            let route;\n            if (id !== undefined) {\n              route = state.routes.find(route => route.name === action.payload.name && id === getId?.({\n                params: route.params\n              }));\n            }\n            if (route) {\n              return Object.assign({}, state, {\n                routes: state.routes.map(r => {\n                  if (r.key !== route?.key) {\n                    return r;\n                  }\n                  return Object.assign({}, r, {\n                    params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n                  });\n                })\n              });\n            } else {\n              return Object.assign({}, state, {\n                preloadedRoutes: state.preloadedRoutes.filter(r => r.name !== action.payload.name || id !== getId?.({\n                  params: r.params\n                })).concat({\n                  key: `${action.payload.name}-${(0, _nonSecure.nanoid)()}`,\n                  name: action.payload.name,\n                  params: routeParamList[action.payload.name] !== undefined ? Object.assign({}, routeParamList[action.payload.name], action.payload.params) : action.payload.params\n                })\n              });\n            }\n          }\n        default:\n          return _BaseRouter.BaseRouter.getStateForAction(state, action);\n      }\n    },\n    actionCreators: StackActions\n  });\n  return router;\n}","map":{"version":3,"names":["_nonSecure","require","_BaseRouter","StackActions","exports","replace","name","params","type","payload","push","pop","count","popToTop","popTo","merge","StackRouter","options","router","Object","assign","BaseRouter","getInitialState","routeNames","routeParamList","initialRouteName","undefined","includes","stale","key","nanoid","index","preloadedRoutes","routes","getRehydratedState","partialState","state","filter","route","map","length","getStateForRouteNamesChange","routeKeyChanges","Math","min","getStateForRouteFocus","findIndex","r","slice","getStateForAction","action","target","source","i","getId","routeGetIdList","id","find","currentRoute","routeKey","path","max","concat","actionCreators"],"sources":["/app/node_modules/@react-navigation/routers/src/StackRouter.tsx"],"sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport { BaseRouter } from './BaseRouter';\nimport type {\n  CommonNavigationAction,\n  DefaultRouterOptions,\n  NavigationRoute,\n  NavigationState,\n  ParamListBase,\n  Route,\n  Router,\n} from './types';\n\nexport type StackActionType =\n  | {\n      type: 'REPLACE';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'PUSH';\n      payload: { name: string; params?: object };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP';\n      payload: { count: number };\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO_TOP';\n      source?: string;\n      target?: string;\n    }\n  | {\n      type: 'POP_TO';\n      payload: {\n        name: string;\n        params?: object;\n        merge?: boolean;\n      };\n      source?: string;\n      target?: string;\n    };\n\nexport type StackRouterOptions = DefaultRouterOptions;\n\nexport type StackNavigationState<ParamList extends ParamListBase> =\n  NavigationState<ParamList> & {\n    /**\n     * Type of the router, in this case, it's stack.\n     */\n    type: 'stack';\n    /**\n     * List of routes, which are supposed to be preloaded before navigating to.\n     */\n    preloadedRoutes: NavigationRoute<ParamList, keyof ParamList>[];\n  };\n\nexport type StackActionHelpers<ParamList extends ParamListBase> = {\n  /**\n   * Replace the current route with a new one.\n   *\n   * @param name Name of the new route.\n   * @param [params] Params object for the new route.\n   */\n  replace<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? [screen: Screen] | [screen: Screen, params: ParamList[Screen]]\n        : [screen: Screen, params: ParamList[Screen]];\n    }[RouteName]\n  ): void;\n\n  /**\n   * Push a new screen onto the stack.\n   *\n   * @param name Name of the route to push onto the stack.\n   * @param [params] Params object for the route.\n   */\n  push<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ? [screen: Screen] | [screen: Screen, params: ParamList[Screen]]\n        : [screen: Screen, params: ParamList[Screen]];\n    }[RouteName]\n  ): void;\n\n  /**\n   * Pop a screen from the stack.\n   */\n  pop(count?: number): void;\n\n  /**\n   * Pop to the first route in the stack, dismissing all other screens.\n   */\n  popToTop(): void;\n\n  /**\n   * Pop any screens to go back to the specified screen.\n   * If the specified screen doesn't exist, it'll be added to the stack.\n   *\n   * @param name Name of the route to navigate to.\n   * @param [params] Params object for the route.\n   * @param [merge] Whether to merge the params onto the route.\n   */\n  popTo<RouteName extends keyof ParamList>(\n    ...args: {\n      [Screen in keyof ParamList]: undefined extends ParamList[Screen]\n        ?\n            | [screen: Screen]\n            | [screen: Screen, params: ParamList[Screen]]\n            | [screen: Screen, params: ParamList[Screen], merge: boolean]\n        :\n            | [screen: Screen, params: ParamList[Screen]]\n            | [screen: Screen, params: ParamList[Screen], merge: boolean];\n    }[RouteName]\n  ): void;\n};\n\nexport const StackActions = {\n  replace(name: string, params?: object): StackActionType {\n    return { type: 'REPLACE', payload: { name, params } };\n  },\n  push(name: string, params?: object): StackActionType {\n    return { type: 'PUSH', payload: { name, params } };\n  },\n  pop(count: number = 1): StackActionType {\n    return { type: 'POP', payload: { count } };\n  },\n  popToTop(): StackActionType {\n    return { type: 'POP_TO_TOP' };\n  },\n  popTo(name: string, params?: object, merge?: boolean): StackActionType {\n    return { type: 'POP_TO', payload: { name, params, merge } };\n  },\n};\n\nexport function StackRouter(options: StackRouterOptions) {\n  const router: Router<\n    StackNavigationState<ParamListBase>,\n    CommonNavigationAction | StackActionType\n  > = {\n    ...BaseRouter,\n\n    type: 'stack',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const initialRouteName =\n        options.initialRouteName !== undefined &&\n        routeNames.includes(options.initialRouteName)\n          ? options.initialRouteName\n          : routeNames[0];\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: 0,\n        routeNames,\n        preloadedRoutes: [],\n        routes: [\n          {\n            key: `${initialRouteName}-${nanoid()}`,\n            name: initialRouteName,\n            params: routeParamList[initialRouteName],\n          },\n        ],\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      const state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes\n        .filter((route) => routeNames.includes(route.name))\n        .map((route) => ({\n          ...route,\n          key: route.key || `${route.name}-${nanoid()}`,\n          params:\n            routeParamList[route.name] !== undefined\n              ? {\n                  ...routeParamList[route.name],\n                  ...route.params,\n                }\n              : route.params,\n        }));\n\n      const preloadedRoutes =\n        state.preloadedRoutes\n          ?.filter((route) => routeNames.includes(route.name))\n          .map(\n            (route) =>\n              ({\n                ...route,\n                key: route.key || `${route.name}-${nanoid()}`,\n                params:\n                  routeParamList[route.name] !== undefined\n                    ? {\n                        ...routeParamList[route.name],\n                        ...route.params,\n                      }\n                    : route.params,\n              }) as Route<string>\n          ) ?? [];\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: `stack-${nanoid()}`,\n        index: routes.length - 1,\n        routeNames,\n        routes,\n        preloadedRoutes,\n      };\n    },\n\n    getStateForRouteNamesChange(\n      state,\n      { routeNames, routeParamList, routeKeyChanges }\n    ) {\n      const routes = state.routes.filter(\n        (route) =>\n          routeNames.includes(route.name) &&\n          !routeKeyChanges.includes(route.name)\n      );\n\n      if (routes.length === 0) {\n        const initialRouteName =\n          options.initialRouteName !== undefined &&\n          routeNames.includes(options.initialRouteName)\n            ? options.initialRouteName\n            : routeNames[0];\n\n        routes.push({\n          key: `${initialRouteName}-${nanoid()}`,\n          name: initialRouteName,\n          params: routeParamList[initialRouteName],\n        });\n      }\n\n      return {\n        ...state,\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1),\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex((r) => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return {\n        ...state,\n        index,\n        routes: state.routes.slice(0, index + 1),\n      };\n    },\n\n    getStateForAction(state, action, options) {\n      const { routeParamList } = options;\n\n      switch (action.type) {\n        case 'REPLACE': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          const { name, params } = action.payload;\n\n          if (!state.routeNames.includes(name)) {\n            return null;\n          }\n\n          return {\n            ...state,\n            routes: state.routes.map((route, i) =>\n              i === index\n                ? {\n                    key: `${name}-${nanoid()}`,\n                    name,\n                    params:\n                      routeParamList[name] !== undefined\n                        ? {\n                            ...routeParamList[name],\n                            ...params,\n                          }\n                        : params,\n                  }\n                : route\n            ),\n          };\n        }\n\n        case 'PUSH':\n        case 'NAVIGATE': {\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          let route: Route<string> | undefined;\n\n          if (id !== undefined) {\n            route = state.routes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else {\n            const currentRoute = state.routes[state.index];\n\n            // If the route matches the current one, then navigate to it\n            if (\n              action.type === 'NAVIGATE' &&\n              action.payload.name === currentRoute.name\n            ) {\n              route = currentRoute;\n            }\n          }\n\n          if (!route) {\n            route = state.preloadedRoutes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          }\n\n          let params;\n\n          if (action.type === 'NAVIGATE' && action.payload.merge && route) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[action.payload.name] !== undefined\n                ? {\n                    ...routeParamList[action.payload.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[action.payload.name] !== undefined\n                ? {\n                    ...routeParamList[action.payload.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          let routes: Route<string>[];\n\n          if (route) {\n            const routeKey = route.key;\n\n            routes = state.routes.filter((r) => r.key !== routeKey);\n            routes.push({\n              ...route,\n              path:\n                action.type === 'NAVIGATE' && action.payload.path !== undefined\n                  ? action.payload.path\n                  : route.path,\n              params,\n            });\n          } else {\n            routes = [\n              ...state.routes,\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                path:\n                  action.type === 'NAVIGATE' ? action.payload.path : undefined,\n                params,\n              },\n            ];\n          }\n\n          return {\n            ...state,\n            index: routes.length - 1,\n            preloadedRoutes: state.preloadedRoutes.filter(\n              (route) => routes[routes.length - 1].key !== route.key\n            ),\n            routes,\n          };\n        }\n\n        case 'NAVIGATE_DEPRECATED': {\n          if (\n            state.preloadedRoutes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            )\n          ) {\n            return null;\n          }\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          // If the route already exists, navigate to that\n          let index = -1;\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          if (id) {\n            index = state.routes.findIndex(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else if (state.routes[state.index].name === action.payload.name) {\n            index = state.index;\n          } else {\n            for (let i = state.routes.length - 1; i >= 0; i--) {\n              if (state.routes[i].name === action.payload.name) {\n                index = i;\n                break;\n              }\n            }\n          }\n\n          if (index === -1) {\n            const routes = [\n              ...state.routes,\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              },\n            ];\n\n            return {\n              ...state,\n              routes,\n              index: routes.length - 1,\n            };\n          }\n\n          const route = state.routes[index];\n\n          let params;\n\n          if (action.payload.merge) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          return {\n            ...state,\n            index,\n            routes: [\n              ...state.routes.slice(0, index),\n              params !== route.params\n                ? { ...route, params }\n                : state.routes[index],\n            ],\n          };\n        }\n\n        case 'POP': {\n          const index =\n            action.target === state.key && action.source\n              ? state.routes.findIndex((r) => r.key === action.source)\n              : state.index;\n\n          if (index > 0) {\n            const count = Math.max(index - action.payload.count + 1, 1);\n            const routes = state.routes\n              .slice(0, count)\n              .concat(state.routes.slice(index + 1));\n\n            return {\n              ...state,\n              index: routes.length - 1,\n              routes,\n            };\n          }\n\n          return null;\n        }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(\n            state,\n            {\n              type: 'POP',\n              payload: { count: state.routes.length - 1 },\n            },\n            options\n          );\n\n        case 'POP_TO': {\n          if (!state.routeNames.includes(action.payload.name)) {\n            return null;\n          }\n\n          // If the route already exists, navigate to that\n          let index = -1;\n\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          if (id) {\n            index = state.routes.findIndex(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          } else if (state.routes[state.index].name === action.payload.name) {\n            index = state.index;\n          } else {\n            for (let i = state.routes.length - 1; i >= 0; i--) {\n              if (state.routes[i].name === action.payload.name) {\n                index = i;\n                break;\n              }\n            }\n          }\n\n          // If the route doesn't exist, remove the current route and add the new one\n          if (index === -1) {\n            const routes = [\n              ...state.routes.slice(0, -1),\n              {\n                key: `${action.payload.name}-${nanoid()}`,\n                name: action.payload.name,\n                params:\n                  routeParamList[action.payload.name] !== undefined\n                    ? {\n                        ...routeParamList[action.payload.name],\n                        ...action.payload.params,\n                      }\n                    : action.payload.params,\n              },\n            ];\n\n            return {\n              ...state,\n              routes,\n              index: routes.length - 1,\n            };\n          }\n\n          const route = state.routes[index];\n\n          let params;\n\n          if (action.payload.merge) {\n            params =\n              action.payload.params !== undefined ||\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...route.params,\n                    ...action.payload.params,\n                  }\n                : route.params;\n          } else {\n            params =\n              routeParamList[route.name] !== undefined\n                ? {\n                    ...routeParamList[route.name],\n                    ...action.payload.params,\n                  }\n                : action.payload.params;\n          }\n\n          return {\n            ...state,\n            index,\n            routes: [\n              ...state.routes.slice(0, index),\n              params !== route.params\n                ? { ...route, params }\n                : state.routes[index],\n            ],\n          };\n        }\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(\n              state,\n              {\n                type: 'POP',\n                payload: { count: 1 },\n                target: action.target,\n                source: action.source,\n              },\n              options\n            );\n          }\n\n          return null;\n\n        case 'PRELOAD': {\n          const getId = options.routeGetIdList[action.payload.name];\n          const id = getId?.({ params: action.payload.params });\n\n          let route: Route<string> | undefined;\n\n          if (id !== undefined) {\n            route = state.routes.find(\n              (route) =>\n                route.name === action.payload.name &&\n                id === getId?.({ params: route.params })\n            );\n          }\n\n          if (route) {\n            return {\n              ...state,\n              routes: state.routes.map((r) => {\n                if (r.key !== route?.key) {\n                  return r;\n                }\n                return {\n                  ...r,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                };\n              }),\n            };\n          } else {\n            return {\n              ...state,\n              preloadedRoutes: state.preloadedRoutes\n                .filter(\n                  (r) =>\n                    r.name !== action.payload.name ||\n                    id !== getId?.({ params: r.params })\n                )\n                .concat({\n                  key: `${action.payload.name}-${nanoid()}`,\n                  name: action.payload.name,\n                  params:\n                    routeParamList[action.payload.name] !== undefined\n                      ? {\n                          ...routeParamList[action.payload.name],\n                          ...action.payload.params,\n                        }\n                      : action.payload.params,\n                }),\n            };\n          }\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions,\n  };\n\n  return router;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}