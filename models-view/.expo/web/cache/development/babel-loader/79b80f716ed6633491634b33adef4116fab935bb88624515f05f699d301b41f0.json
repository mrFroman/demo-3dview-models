{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport useRNColorScheme from \"react-native-web/dist/exports/useColorScheme\";\nexport function useColorScheme() {\n  const [hasHydrated, setHasHydrated] = useState(false);\n  useEffect(() => {\n    setHasHydrated(true);\n  }, []);\n  const colorScheme = useRNColorScheme();\n  if (hasHydrated) {\n    return colorScheme;\n  }\n  return 'light';\n}","map":{"version":3,"names":["useEffect","useState","useRNColorScheme","useColorScheme","hasHydrated","setHasHydrated","colorScheme"],"sources":["/app/app-example/hooks/useColorScheme.web.ts"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useColorScheme as useRNColorScheme } from 'react-native';\n\n/**\n * To support static rendering, this value needs to be re-calculated on the client side for web\n */\nexport function useColorScheme() {\n  const [hasHydrated, setHasHydrated] = useState(false);\n\n  useEffect(() => {\n    setHasHydrated(true);\n  }, []);\n\n  const colorScheme = useRNColorScheme();\n\n  if (hasHydrated) {\n    return colorScheme;\n  }\n\n  return 'light';\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,gBAAA;AAM5C,OAAO,SAASC,cAAcA,CAAA,EAAG;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGJ,QAAQ,CAAC,KAAK,CAAC;EAErDD,SAAS,CAAC,MAAM;IACdK,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAGJ,gBAAgB,CAAC,CAAC;EAEtC,IAAIE,WAAW,EAAE;IACf,OAAOE,WAAW;EACpB;EAEA,OAAO,OAAO;AAChB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}