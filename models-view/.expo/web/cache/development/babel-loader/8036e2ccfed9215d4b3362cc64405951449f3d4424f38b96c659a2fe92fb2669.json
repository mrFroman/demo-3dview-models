{"ast":null,"code":"import { UnavailabilityError } from 'expo-modules-core';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport processColor from \"react-native-web/dist/exports/processColor\";\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport { WebBrowserResultType, WebBrowserPresentationStyle } from './WebBrowser.types';\nexport { WebBrowserResultType, WebBrowserPresentationStyle };\nconst emptyCustomTabsPackages = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: []\n};\nexport async function getCustomTabsSupportingBrowsersAsync() {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\nexport async function warmUpAsync(browserPackage) {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\nexport async function mayInitWithUrlAsync(url, browserPackage) {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\nexport async function coolDownAsync(browserPackage) {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\nexport async function openBrowserAsync(url, browserParams = {}) {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n  let result;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n  } catch {\n    return {\n      type: WebBrowserResultType.LOCKED\n    };\n  }\n  return result;\n}\nexport function dismissBrowser() {\n  return ExponentWebBrowser.dismissBrowser?.();\n}\nexport async function openAuthSessionAsync(url, redirectUrl, options = {}) {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\nexport function dismissAuthSession() {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\nexport function maybeCompleteAuthSession(options = {}) {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return {\n    type: 'failed',\n    message: 'Not supported on this platform'\n  };\n}\nfunction _processOptions(options) {\n  return Object.assign({}, options, {\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor)\n  });\n}\nfunction _authSessionIsNativelySupported() {\n  return Platform.OS !== 'android';\n}\nlet _redirectSubscription = null;\nlet _onWebBrowserCloseAndroid = null;\nlet _isAppStateAvailable = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\nasync function _openBrowserAndWaitAndroidAsync(startUrl, browserParams = {}) {\n  const appStateChangedToActive = new Promise(resolve => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n  let result = {\n    type: WebBrowserResultType.CANCEL\n  };\n  let type = null;\n  try {\n    ({\n      type\n    } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = {\n      type: WebBrowserResultType.DISMISS\n    };\n  }\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\nasync function _openAuthSessionPolyfillAsync(startUrl, returnUrl, browserParams = {}) {\n  if (_redirectSubscription) {\n    throw new Error(`The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`);\n  }\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([_openBrowserAndWaitAndroidAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n    } else {\n      return await Promise.race([openBrowserAsync(startUrl, browserParams), _waitForRedirectAsync(returnUrl)]);\n    }\n  } finally {\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n    _stopWaitingForRedirect();\n  }\n}\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(`The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`);\n  }\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\nfunction _waitForRedirectAsync(returnUrl) {\n  return new Promise(resolve => {\n    const redirectHandler = event => {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({\n          url: event.url,\n          type: 'success'\n        });\n      }\n    };\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}","map":{"version":3,"names":["UnavailabilityError","AppState","Linking","Platform","processColor","ExponentWebBrowser","WebBrowserResultType","WebBrowserPresentationStyle","emptyCustomTabsPackages","defaultBrowserPackage","undefined","preferredBrowserPackage","browserPackages","servicePackages","getCustomTabsSupportingBrowsersAsync","OS","warmUpAsync","browserPackage","mayInitWithUrlAsync","url","coolDownAsync","openBrowserAsync","browserParams","result","_processOptions","type","LOCKED","dismissBrowser","openAuthSessionAsync","redirectUrl","options","_authSessionIsNativelySupported","includes","_openAuthSessionPolyfillAsync","dismissAuthSession","maybeCompleteAuthSession","message","Object","assign","controlsColor","toolbarColor","secondaryToolbarColor","_redirectSubscription","_onWebBrowserCloseAndroid","_isAppStateAvailable","currentState","_onAppStateChangeAndroid","state","_openBrowserAndWaitAndroidAsync","startUrl","appStateChangedToActive","Promise","resolve","stateChangeSubscription","addEventListener","CANCEL","e","remove","DISMISS","returnUrl","Error","race","_waitForRedirectAsync","_stopWaitingForRedirect","redirectHandler","event","startsWith"],"sources":["/app/node_modules/expo-web-browser/src/WebBrowser.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport {\n  AppState,\n  AppStateStatus,\n  Linking,\n  Platform,\n  EmitterSubscription,\n  processColor,\n} from 'react-native';\n\nimport ExponentWebBrowser from './ExpoWebBrowser';\nimport {\n  RedirectEvent,\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n} from './WebBrowser.types';\n\nexport {\n  WebBrowserAuthSessionResult,\n  WebBrowserCompleteAuthSessionOptions,\n  WebBrowserCompleteAuthSessionResult,\n  WebBrowserCoolDownResult,\n  WebBrowserCustomTabsResults,\n  WebBrowserMayInitWithUrlResult,\n  WebBrowserOpenOptions,\n  WebBrowserRedirectResult,\n  WebBrowserResult,\n  WebBrowserResultType,\n  WebBrowserWarmUpResult,\n  WebBrowserWindowFeatures,\n  WebBrowserPresentationStyle,\n  AuthSessionOpenOptions,\n};\n\nconst emptyCustomTabsPackages: WebBrowserCustomTabsResults = {\n  defaultBrowserPackage: undefined,\n  preferredBrowserPackage: undefined,\n  browserPackages: [],\n  servicePackages: [],\n};\n\n// @needsAudit\n/**\n * Returns a list of applications package names supporting Custom Tabs, Custom Tabs\n * service, user chosen and preferred one. This may not be fully reliable, since it uses\n * `PackageManager.getResolvingActivities` under the hood. (For example, some browsers might not be\n * present in browserPackages list once another browser is set to default.)\n *\n * @return The promise which fulfils with [`WebBrowserCustomTabsResults`](#webbrowsercustomtabsresults) object.\n * @platform android\n */\nexport async function getCustomTabsSupportingBrowsersAsync(): Promise<WebBrowserCustomTabsResults> {\n  if (!ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync) {\n    throw new UnavailabilityError('WebBrowser', 'getCustomTabsSupportingBrowsersAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return emptyCustomTabsPackages;\n  } else {\n    return await ExponentWebBrowser.getCustomTabsSupportingBrowsersAsync();\n  }\n}\n\n// @needsAudit\n/**\n * This method calls `warmUp` method on [CustomTabsClient](https://developer.android.com/reference/android/support/customtabs/CustomTabsClient.html#warmup(long))\n * for specified package.\n *\n * @param browserPackage Package of browser to be warmed up. If not set, preferred browser will be warmed.\n *\n * @return A promise which fulfils with `WebBrowserWarmUpResult` object.\n * @platform android\n */\nexport async function warmUpAsync(browserPackage?: string): Promise<WebBrowserWarmUpResult> {\n  if (!ExponentWebBrowser.warmUpAsync) {\n    throw new UnavailabilityError('WebBrowser', 'warmUpAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.warmUpAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This method initiates (if needed) [CustomTabsSession](https://developer.android.com/reference/android/support/customtabs/CustomTabsSession.html#maylaunchurl)\n * and calls its `mayLaunchUrl` method for browser specified by the package.\n *\n * @param url The url of page that is likely to be loaded first when opening browser.\n * @param browserPackage Package of browser to be informed. If not set, preferred\n * browser will be used.\n *\n * @return A promise which fulfils with `WebBrowserMayInitWithUrlResult` object.\n * @platform android\n */\nexport async function mayInitWithUrlAsync(\n  url: string,\n  browserPackage?: string\n): Promise<WebBrowserMayInitWithUrlResult> {\n  if (!ExponentWebBrowser.mayInitWithUrlAsync) {\n    throw new UnavailabilityError('WebBrowser', 'mayInitWithUrlAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.mayInitWithUrlAsync(url, browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * This methods removes all bindings to services created by [`warmUpAsync`](#webbrowserwarmupasyncbrowserpackage)\n * or [`mayInitWithUrlAsync`](#webbrowsermayinitwithurlasyncurl-browserpackage). You should call\n * this method once you don't need them to avoid potential memory leaks. However, those binding\n * would be cleared once your application is destroyed, which might be sufficient in most cases.\n *\n * @param browserPackage Package of browser to be cooled. If not set, preferred browser will be used.\n *\n * @return The promise which fulfils with ` WebBrowserCoolDownResult` when cooling is performed, or\n * an empty object when there was no connection to be dismissed.\n * @platform android\n */\nexport async function coolDownAsync(browserPackage?: string): Promise<WebBrowserCoolDownResult> {\n  if (!ExponentWebBrowser.coolDownAsync) {\n    throw new UnavailabilityError('WebBrowser', 'coolDownAsync');\n  }\n  if (Platform.OS !== 'android') {\n    return {};\n  } else {\n    return await ExponentWebBrowser.coolDownAsync(browserPackage);\n  }\n}\n\n// @needsAudit\n/**\n * Opens the url with Safari in a modal on iOS using [`SFSafariViewController`](https://developer.apple.com/documentation/safariservices/sfsafariviewcontroller),\n * and Chrome in a new [custom tab](https://developer.chrome.com/multidevice/android/customtabs)\n * on Android. On iOS, the modal Safari will not share cookies with the system Safari. If you need\n * this, use [`openAuthSessionAsync`](#webbrowseropenauthsessionasyncurl-redirecturl-options).\n *\n * @param url The url to open in the web browser.\n * @param browserParams A dictionary of key-value pairs.\n *\n * @return The promise behaves differently based on the platform.\n * On Android promise resolves with `{ type: 'opened' }` if we were able to open browser.\n * On iOS:\n * - If the user closed the web browser, the Promise resolves with `{ type: 'cancel' }`.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser), the Promise resolves with `{ type: 'dismiss' }`.\n */\nexport async function openBrowserAsync(\n  url: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  if (!ExponentWebBrowser.openBrowserAsync) {\n    throw new UnavailabilityError('WebBrowser', 'openBrowserAsync');\n  }\n\n  let result: WebBrowserResult;\n  try {\n    result = await ExponentWebBrowser.openBrowserAsync(url, _processOptions(browserParams));\n  } catch {\n    return { type: WebBrowserResultType.LOCKED };\n  }\n\n  return result;\n}\n\n// @needsAudit\n/**\n * Dismisses the presented web browser.\n *\n * @return The promise that resolves with `{ type: 'dismiss' }` on the successful attempt or throws an error if dismiss functionality is not available.\n * @platform ios\n */\nexport function dismissBrowser(): Promise<{ type: WebBrowserResultType.DISMISS }> {\n  return ExponentWebBrowser.dismissBrowser?.();\n}\n\n// @needsAudit\n/**\n * # On Android:\n * This will be done using a \"custom Chrome tabs\" browser, [AppState](https://reactnative.dev/docs/appstate),\n * and [Linking](./linking/) APIs.\n *\n * # On iOS:\n * Opens the url with Safari in a modal using `ASWebAuthenticationSession`. The user will be asked\n * whether to allow the app to authenticate using the given url.\n * To handle redirection back to the mobile application, the redirect URI set in the authentication server\n * has to use the protocol provided as the scheme in **app.json** [`expo.scheme`](./../config/app/#scheme).\n * For example, `demo://` not `https://` protocol.\n * Using `Linking.addEventListener` is not needed and can have side effects.\n *\n * # On web:\n * > This API can only be used in a secure environment (localhost/https).\n * to test this. Otherwise, an error with code [`ERR_WEB_BROWSER_CRYPTO`](#err_web_browser_crypto) will be thrown.\n * This will use the browser's [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open) API.\n * - _Desktop_: This will create a new web popup window in the browser that can be closed later using `WebBrowser.maybeCompleteAuthSession()`.\n * - _Mobile_: This will open a new tab in the browser which can be closed using `WebBrowser.maybeCompleteAuthSession()`.\n *\n * How this works on web:\n * - A crypto state will be created for verifying the redirect.\n *   - This means you need to run with `npx expo start --https`\n * - The state will be added to the window's `localstorage`. This ensures that auth cannot complete\n *   unless it's done from a page running with the same origin as it was started.\n *   Ex: if `openAuthSessionAsync` is invoked on `https://localhost:19006`, then `maybeCompleteAuthSession`\n *   must be invoked on a page hosted from the origin `https://localhost:19006`. Using a different\n *   website, or even a different host like `https://128.0.0.*:19006` for example will not work.\n * - A timer will be started to check for every 1000 milliseconds (1 second) to detect if the window\n *   has been closed by the user. If this happens then a promise will resolve with `{ type: 'dismiss' }`.\n *\n * > On mobile web, Chrome and Safari will block any call to [`window.open()`](https://developer.mozilla.org/en-US/docs/Web/API/Window/open)\n * which takes too long to fire after a user interaction. This method must be invoked immediately\n * after a user interaction. If the event is blocked, an error with code [`ERR_WEB_BROWSER_BLOCKED`](#err_web_browser_blocked) will be thrown.\n *\n * @param url The url to open in the web browser. This should be a login page.\n * @param redirectUrl _Optional_ - The url to deep link back into your app.\n * On web, this defaults to the output of [`Linking.createURL(\"\")`](./linking/#linkingcreateurlpath-namedparameters).\n * @param options _Optional_ - An object extending the [`WebBrowserOpenOptions`](#webbrowseropenoptions).\n * If there is no native AuthSession implementation available (which is the case on Android)\n * these params will be used in the browser polyfill. If there is a native AuthSession implementation,\n * these params will be ignored.\n *\n * @return\n * - If the user does not permit the application to authenticate with the given url, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the user closed the web browser, the Promise fulfills with `{ type: 'cancel' }` object.\n * - If the browser is closed using [`dismissBrowser`](#webbrowserdismissbrowser),\n * the Promise fulfills with `{ type: 'dismiss' }` object.\n */\nexport async function openAuthSessionAsync(\n  url: string,\n  redirectUrl?: string | null,\n  options: AuthSessionOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.openAuthSessionAsync) {\n      throw new UnavailabilityError('WebBrowser', 'openAuthSessionAsync');\n    }\n    if (['ios', 'web'].includes(Platform.OS)) {\n      return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl, _processOptions(options));\n    }\n    return ExponentWebBrowser.openAuthSessionAsync(url, redirectUrl);\n  } else {\n    return _openAuthSessionPolyfillAsync(url, redirectUrl, options);\n  }\n}\n\n/**\n * Dismisses the current authentication session. On web, it will close the popup window associated with auth process.\n *\n * @return The `void` on the successful attempt or throws an error if dismiss functionality is not available.\n *\n * @platform ios\n * @platform web\n */\nexport function dismissAuthSession(): void {\n  if (_authSessionIsNativelySupported()) {\n    if (!ExponentWebBrowser.dismissAuthSession) {\n      throw new UnavailabilityError('WebBrowser', 'dismissAuthSession');\n    }\n    ExponentWebBrowser.dismissAuthSession();\n  } else {\n    if (!ExponentWebBrowser.dismissBrowser) {\n      throw new UnavailabilityError('WebBrowser', 'dismissBrowser');\n    }\n    ExponentWebBrowser.dismissBrowser();\n  }\n}\n\n// @needsAudit\n/**\n * Possibly completes an authentication session on web in a window popup. The method\n * should be invoked on the page that the window redirects to.\n *\n * @param options\n *\n * @return Returns an object with message about why the redirect failed or succeeded:\n *\n * If `type` is set to `failed`, the reason depends on the message:\n * - `Not supported on this platform`: If the platform doesn't support this method (Android, iOS).\n * - `Cannot use expo-web-browser in a non-browser environment`: If the code was executed in an SSR\n *   or node environment.\n * - `No auth session is currently in progress`: (the cached state wasn't found in local storage).\n *   This can happen if the window redirects to an origin (website) that is different to the initial\n *   website origin. If this happens in development, it may be because the auth started on localhost\n *   and finished on your computer port (Ex: `128.0.0.*`). This is controlled by the `redirectUrl`\n *   and `returnUrl`.\n * - `Current URL \"<URL>\" and original redirect URL \"<URL>\" do not match`: This can occur when the\n *   redirect URL doesn't match what was initial defined as the `returnUrl`. You can skip this test\n *   in development by passing `{ skipRedirectCheck: true }` to the function.\n *\n * If `type` is set to `success`, the parent window will attempt to close the child window immediately.\n *\n * If the error `ERR_WEB_BROWSER_REDIRECT` was thrown, it may mean that the parent window was\n * reloaded before the auth was completed. In this case you'll need to close the child window manually.\n *\n * @platform web\n */\nexport function maybeCompleteAuthSession(\n  options: WebBrowserCompleteAuthSessionOptions = {}\n): WebBrowserCompleteAuthSessionResult {\n  if (ExponentWebBrowser.maybeCompleteAuthSession) {\n    return ExponentWebBrowser.maybeCompleteAuthSession(options);\n  }\n  return { type: 'failed', message: 'Not supported on this platform' };\n}\n\nfunction _processOptions(options: WebBrowserOpenOptions) {\n  return {\n    ...options,\n    controlsColor: processColor(options.controlsColor),\n    toolbarColor: processColor(options.toolbarColor),\n    secondaryToolbarColor: processColor(options.secondaryToolbarColor),\n  };\n}\n\n/* Android polyfill for ASWebAuthenticationSession flow */\n\nfunction _authSessionIsNativelySupported(): boolean {\n  return Platform.OS !== 'android';\n}\n\nlet _redirectSubscription: EmitterSubscription | null = null;\n\n/*\n * openBrowserAsync on Android doesn't wait until closed, so we need to polyfill\n * it with AppState\n */\n\n// Store the `resolve` function from a Promise to fire when the AppState\n// returns to active\nlet _onWebBrowserCloseAndroid: null | (() => void) = null;\n\n// If the initial AppState.currentState is null, we assume that the first call to\n// AppState#change event is not actually triggered by a real change,\n// is triggered instead by the bridge capturing the current state\n// (https://reactnative.dev/docs/appstate#basic-usage)\nlet _isAppStateAvailable: boolean = AppState.currentState !== null;\nfunction _onAppStateChangeAndroid(state: AppStateStatus) {\n  if (!_isAppStateAvailable) {\n    _isAppStateAvailable = true;\n    return;\n  }\n\n  if (state === 'active' && _onWebBrowserCloseAndroid) {\n    _onWebBrowserCloseAndroid();\n  }\n}\n\nasync function _openBrowserAndWaitAndroidAsync(\n  startUrl: string,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserResult> {\n  const appStateChangedToActive = new Promise<void>((resolve) => {\n    _onWebBrowserCloseAndroid = resolve;\n  });\n  const stateChangeSubscription = AppState.addEventListener('change', _onAppStateChangeAndroid);\n\n  let result: WebBrowserResult = { type: WebBrowserResultType.CANCEL };\n  let type: string | null = null;\n\n  try {\n    ({ type } = await openBrowserAsync(startUrl, browserParams));\n  } catch (e) {\n    stateChangeSubscription.remove();\n    _onWebBrowserCloseAndroid = null;\n    throw e;\n  }\n\n  if (type === 'opened') {\n    await appStateChangedToActive;\n    result = { type: WebBrowserResultType.DISMISS };\n  }\n\n  stateChangeSubscription.remove();\n  _onWebBrowserCloseAndroid = null;\n  return result;\n}\n\nasync function _openAuthSessionPolyfillAsync(\n  startUrl: string,\n  returnUrl?: string | null,\n  browserParams: WebBrowserOpenOptions = {}\n): Promise<WebBrowserAuthSessionResult> {\n  if (_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser's auth session is in an invalid state with a redirect handler set when it should not be`\n    );\n  }\n\n  if (_onWebBrowserCloseAndroid) {\n    throw new Error(`WebBrowser is already open, only one can be open at a time`);\n  }\n\n  try {\n    if (Platform.OS === 'android') {\n      return await Promise.race([\n        _openBrowserAndWaitAndroidAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    } else {\n      return await Promise.race([\n        openBrowserAsync(startUrl, browserParams),\n        _waitForRedirectAsync(returnUrl),\n      ]);\n    }\n  } finally {\n    // We can't dismiss the browser on Android, only call this when it's available.\n    // Users on Android need to manually press the 'x' button in Chrome Custom Tabs, sadly.\n    if (ExponentWebBrowser.dismissBrowser) {\n      ExponentWebBrowser.dismissBrowser();\n    }\n\n    _stopWaitingForRedirect();\n  }\n}\n\nfunction _stopWaitingForRedirect() {\n  if (!_redirectSubscription) {\n    throw new Error(\n      `The WebBrowser auth session is in an invalid state with no redirect handler when one should be set`\n    );\n  }\n\n  _redirectSubscription.remove();\n  _redirectSubscription = null;\n}\n\nfunction _waitForRedirectAsync(returnUrl?: string | null): Promise<WebBrowserRedirectResult> {\n  // Note that this Promise never resolves when `returnUrl` is nullish\n  return new Promise((resolve) => {\n    const redirectHandler = (event: RedirectEvent) => {\n      if (returnUrl && event.url.startsWith(returnUrl)) {\n        resolve({ url: event.url, type: 'success' });\n      }\n    };\n\n    _redirectSubscription = Linking.addEventListener('url', redirectHandler);\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}