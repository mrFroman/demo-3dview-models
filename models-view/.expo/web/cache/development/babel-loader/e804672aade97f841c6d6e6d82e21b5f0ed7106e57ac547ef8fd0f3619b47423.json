{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLinkingConfig = exports.getNavigationConfig = void 0;\nconst native_1 = require(\"@react-navigation/native\");\nconst expo_modules_core_1 = require(\"expo-modules-core\");\nconst getReactNavigationConfig_1 = require(\"./getReactNavigationConfig\");\nconst linking_1 = require(\"./link/linking\");\nfunction getNavigationConfig(routes, metaOnly = true) {\n  return (0, getReactNavigationConfig_1.getReactNavigationConfig)(routes, metaOnly);\n}\nexports.getNavigationConfig = getNavigationConfig;\nfunction getLinkingConfig(store, routes, context, {\n  metaOnly = true,\n  serverUrl\n} = {}) {\n  let hasCachedInitialUrl = false;\n  let initialUrl;\n  const nativeLinkingKey = context.keys().find(key => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking = nativeLinkingKey ? context(nativeLinkingKey) : undefined;\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    getInitialURL() {\n      if (!hasCachedInitialUrl) {\n        if (expo_modules_core_1.Platform.OS === 'web') {\n          initialUrl = serverUrl ?? (0, linking_1.getInitialURL)();\n        } else {\n          initialUrl = serverUrl ?? (0, linking_1.getInitialURL)();\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({\n                path: initialUrl,\n                initial: true\n              });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then(url => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({\n                  path: url,\n                  initial: true\n                });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: (0, linking_1.addEventListener)(nativeLinking),\n    getStateFromPath: linking_1.getStateFromPath.bind(store),\n    getPathFromState(state, options) {\n      return (0, linking_1.getPathFromState)(state, Object.assign({\n        screens: {}\n      }, this.config, options)) ?? '/';\n    },\n    getActionFromState: native_1.getActionFromState\n  };\n}\nexports.getLinkingConfig = getLinkingConfig;","map":{"version":3,"names":["native_1","require","expo_modules_core_1","getReactNavigationConfig_1","linking_1","getNavigationConfig","routes","metaOnly","getReactNavigationConfig","exports","getLinkingConfig","store","context","serverUrl","hasCachedInitialUrl","initialUrl","nativeLinkingKey","keys","find","key","match","nativeLinking","undefined","prefixes","config","getInitialURL","Platform","OS","redirectSystemPath","path","initial","then","url","subscribe","addEventListener","getStateFromPath","bind","getPathFromState","state","options","Object","assign","screens","getActionFromState"],"sources":["/app/node_modules/expo-router/src/getLinkingConfig.ts"],"sourcesContent":["import { getActionFromState, LinkingOptions } from '@react-navigation/native';\nimport { Platform } from 'expo-modules-core';\n\nimport { RouteNode } from './Route';\nimport { State } from './fork/getPathFromState';\nimport { getReactNavigationConfig } from './getReactNavigationConfig';\nimport { RouterStore } from './global-state/router-store';\nimport {\n  addEventListener,\n  getInitialURL,\n  getPathFromState,\n  getStateFromPath,\n} from './link/linking';\nimport { NativeIntent, RequireContext } from './types';\n\nexport function getNavigationConfig(routes: RouteNode, metaOnly: boolean = true) {\n  return getReactNavigationConfig(routes, metaOnly);\n}\n\nexport type ExpoLinkingOptions<T extends object = Record<string, unknown>> = LinkingOptions<T> & {\n  getPathFromState?: typeof getPathFromState;\n  getStateFromPath?: typeof getStateFromPath;\n};\n\nexport type LinkingConfigOptions = {\n  metaOnly?: boolean;\n  serverUrl?: string;\n  getInitialURL?: typeof getInitialURL;\n};\n\nexport function getLinkingConfig(\n  store: RouterStore,\n  routes: RouteNode,\n  context: RequireContext,\n  { metaOnly = true, serverUrl }: LinkingConfigOptions = {}\n): ExpoLinkingOptions {\n  // Returning `undefined` / `null from `getInitialURL` are valid values, so we need to track if it's been called.\n  let hasCachedInitialUrl = false;\n  let initialUrl: ReturnType<typeof getInitialURL> | undefined;\n\n  const nativeLinkingKey = context\n    .keys()\n    .find((key) => key.match(/^\\.\\/\\+native-intent\\.[tj]sx?$/));\n  const nativeLinking: NativeIntent | undefined = nativeLinkingKey\n    ? context(nativeLinkingKey)\n    : undefined;\n\n  return {\n    prefixes: [],\n    config: getNavigationConfig(routes, metaOnly),\n    // A custom getInitialURL is used on native to ensure the app always starts at\n    // the root path if it's launched from something other than a deep link.\n    // This helps keep the native functionality working like the web functionality.\n    // For example, if you had a root navigator where the first screen was `/settings` and the second was `/index`\n    // then `/index` would be used on web and `/settings` would be used on native.\n    getInitialURL() {\n      // Expo Router calls `getInitialURL` twice, which may confuse the user if they provide a custom `getInitialURL`.\n      // Therefor we memoize the result.\n      if (!hasCachedInitialUrl) {\n        if (Platform.OS === 'web') {\n          initialUrl = serverUrl ?? getInitialURL();\n        } else {\n          initialUrl = serverUrl ?? getInitialURL();\n\n          if (typeof initialUrl === 'string') {\n            if (typeof nativeLinking?.redirectSystemPath === 'function') {\n              initialUrl = nativeLinking.redirectSystemPath({ path: initialUrl, initial: true });\n            }\n          } else if (initialUrl) {\n            initialUrl = initialUrl.then((url) => {\n              if (url && typeof nativeLinking?.redirectSystemPath === 'function') {\n                return nativeLinking.redirectSystemPath({ path: url, initial: true });\n              }\n              return url;\n            });\n          }\n        }\n        hasCachedInitialUrl = true;\n      }\n      return initialUrl;\n    },\n    subscribe: addEventListener(nativeLinking),\n    getStateFromPath: getStateFromPath.bind(store),\n    getPathFromState(state: State, options: Parameters<typeof getPathFromState>[1]) {\n      return (\n        getPathFromState(state, {\n          screens: {},\n          ...this.config,\n          ...options,\n        }) ?? '/'\n      );\n    },\n    // Add all functions to ensure the types never need to fallback.\n    // This is a convenience for usage in the package.\n    getActionFromState,\n  };\n}\n"],"mappings":";;;;;;AAAA,MAAAA,QAAA,GAAAC,OAAA;AACA,MAAAC,mBAAA,GAAAD,OAAA;AAIA,MAAAE,0BAAA,GAAAF,OAAA;AAEA,MAAAG,SAAA,GAAAH,OAAA;AAQA,SAAgBI,mBAAmBA,CAACC,MAAiB,EAAEC,QAAA,GAAoB,IAAI;EAC7E,OAAO,IAAAJ,0BAAA,CAAAK,wBAAwB,EAACF,MAAM,EAAEC,QAAQ,CAAC;AACnD;AAFAE,OAAA,CAAAJ,mBAAA,GAAAA,mBAAA;AAeA,SAAgBK,gBAAgBA,CAC9BC,KAAkB,EAClBL,MAAiB,EACjBM,OAAuB,EACvB;EAAEL,QAAQ,GAAG,IAAI;EAAEM;AAAS,IAA2B,EAAE;EAGzD,IAAIC,mBAAmB,GAAG,KAAK;EAC/B,IAAIC,UAAwD;EAE5D,MAAMC,gBAAgB,GAAGJ,OAAO,CAC7BK,IAAI,EAAE,CACNC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAC,gCAAgC,CAAC,CAAC;EAC7D,MAAMC,aAAa,GAA6BL,gBAAgB,GAC5DJ,OAAO,CAACI,gBAAgB,CAAC,GACzBM,SAAS;EAEb,OAAO;IACLC,QAAQ,EAAE,EAAE;IACZC,MAAM,EAAEnB,mBAAmB,CAACC,MAAM,EAAEC,QAAQ,CAAC;IAM7CkB,aAAaA,CAAA;MAGX,IAAI,CAACX,mBAAmB,EAAE;QACxB,IAAIZ,mBAAA,CAAAwB,QAAQ,CAACC,EAAE,KAAK,KAAK,EAAE;UACzBZ,UAAU,GAAGF,SAAS,IAAI,IAAAT,SAAA,CAAAqB,aAAa,GAAE;SAC1C,MAAM;UACLV,UAAU,GAAGF,SAAS,IAAI,IAAAT,SAAA,CAAAqB,aAAa,GAAE;UAEzC,IAAI,OAAOV,UAAU,KAAK,QAAQ,EAAE;YAClC,IAAI,OAAOM,aAAa,EAAEO,kBAAkB,KAAK,UAAU,EAAE;cAC3Db,UAAU,GAAGM,aAAa,CAACO,kBAAkB,CAAC;gBAAEC,IAAI,EAAEd,UAAU;gBAAEe,OAAO,EAAE;cAAI,CAAE,CAAC;;WAErF,MAAM,IAAIf,UAAU,EAAE;YACrBA,UAAU,GAAGA,UAAU,CAACgB,IAAI,CAAEC,GAAG,IAAI;cACnC,IAAIA,GAAG,IAAI,OAAOX,aAAa,EAAEO,kBAAkB,KAAK,UAAU,EAAE;gBAClE,OAAOP,aAAa,CAACO,kBAAkB,CAAC;kBAAEC,IAAI,EAAEG,GAAG;kBAAEF,OAAO,EAAE;gBAAI,CAAE,CAAC;;cAEvE,OAAOE,GAAG;YACZ,CAAC,CAAC;;;QAGNlB,mBAAmB,GAAG,IAAI;;MAE5B,OAAOC,UAAU;IACnB,CAAC;IACDkB,SAAS,EAAE,IAAA7B,SAAA,CAAA8B,gBAAgB,EAACb,aAAa,CAAC;IAC1Cc,gBAAgB,EAAE/B,SAAA,CAAA+B,gBAAgB,CAACC,IAAI,CAACzB,KAAK,CAAC;IAC9C0B,gBAAgBA,CAACC,KAAY,EAAEC,OAA+C;MAC5E,OACE,IAAAnC,SAAA,CAAAiC,gBAAgB,EAACC,KAAK,EAAAE,MAAA,CAAAC,MAAA;QACpBC,OAAO,EAAE;MAAE,GACR,IAAI,CAAClB,MAAM,EACXe,OAAO,CACX,CAAC,IAAI,GAAG;IAEb,CAAC;IAGDI,kBAAkB,EAAlB3C,QAAA,CAAA2C;GACD;AACH;AAlEAlC,OAAA,CAAAC,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}