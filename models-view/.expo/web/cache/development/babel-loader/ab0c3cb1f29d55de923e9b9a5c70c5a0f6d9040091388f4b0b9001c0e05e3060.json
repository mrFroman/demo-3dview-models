{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nconst _excluded = [\"linking\"];\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStaticNavigation = createStaticNavigation;\nvar _core = require(\"@react-navigation/core\");\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationContainer = require(\"./NavigationContainer.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction createStaticNavigation(tree) {\n  const Component = (0, _core.createComponentForStaticNavigation)(tree, 'RootNavigator');\n  function Navigation(_ref, ref) {\n    let {\n        linking\n      } = _ref,\n      rest = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const linkingConfig = React.useMemo(() => {\n      const screens = (0, _core.createPathConfigForStaticNavigation)(tree, {\n        initialRouteName: linking?.config?.initialRouteName\n      }, linking?.enabled === 'auto');\n      if (!screens) return;\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens\n      };\n    }, [linking?.enabled, linking?.config?.path, linking?.config?.initialRouteName]);\n    const memoizedLinking = React.useMemo(() => {\n      if (!linking) {\n        return undefined;\n      }\n      const enabled = typeof linking.enabled === 'boolean' ? linking.enabled : linkingConfig?.screens != null;\n      return Object.assign({}, linking, {\n        enabled,\n        config: linkingConfig\n      });\n    }, [linking, linkingConfig]);\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error('Linking is enabled but no linking configuration was found for the screens.\\n\\n' + 'To solve this:\\n' + \"- Specify a 'linking' property for the screens you want to link to.\\n\" + \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" + 'See usage guide: https://reactnavigation.org/docs/static-configuration#linking');\n    }\n    return (0, _jsxRuntime.jsx)(_NavigationContainer.NavigationContainer, Object.assign({}, rest, {\n      ref: ref,\n      linking: memoizedLinking,\n      children: (0, _jsxRuntime.jsx)(Component, {})\n    }));\n  }\n  return React.forwardRef(Navigation);\n}","map":{"version":3,"names":["_core","require","React","_interopRequireWildcard","_NavigationContainer","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","createStaticNavigation","tree","Component","createComponentForStaticNavigation","Navigation","_ref","ref","linking","rest","_objectWithoutPropertiesLoose","_excluded","linkingConfig","useMemo","screens","createPathConfigForStaticNavigation","initialRouteName","config","enabled","path","memoizedLinking","undefined","assign","Error","jsx","NavigationContainer","children","forwardRef"],"sources":["/app/node_modules/@react-navigation/native/src/createStaticNavigation.tsx"],"sourcesContent":["import {\n  createComponentForStaticNavigation,\n  createPathConfigForStaticNavigation,\n  type NavigationContainerRef,\n  type ParamListBase,\n  type StaticNavigation,\n} from '@react-navigation/core';\nimport * as React from 'react';\n\nimport { NavigationContainer } from './NavigationContainer';\nimport type { LinkingOptions } from './types';\n\ntype Props = Omit<\n  React.ComponentProps<typeof NavigationContainer>,\n  'linking' | 'children'\n> & {\n  /**\n   * Options for deep linking.\n   */\n  linking?: Omit<LinkingOptions<ParamListBase>, 'config' | 'enabled'> & {\n    /**\n     * Whether deep link handling should be enabled.\n     * Defaults to `true` if any `linking` options are specified, `false` otherwise.\n     *\n     * When 'auto' is specified, all leaf screens will get a autogenerated path.\n     * The generated path will be a kebab-case version of the screen name.\n     * This can be overridden for specific screens by specifying `linking` for the screen.\n     */\n    enabled?: 'auto' | true | false;\n    /**\n     * Additional configuration\n     */\n    config?: Omit<\n      NonNullable<LinkingOptions<ParamListBase>['config']>,\n      'screens'\n    >;\n  };\n};\n\n/**\n * Create a navigation component from a static navigation config.\n * The returned component is a wrapper around `NavigationContainer`.\n *\n * @param tree Static navigation config.\n * @returns Navigation component to use in your app.\n */\nexport function createStaticNavigation(tree: StaticNavigation<any, any, any>) {\n  const Component = createComponentForStaticNavigation(tree, 'RootNavigator');\n\n  function Navigation(\n    { linking, ...rest }: Props,\n    ref: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const linkingConfig = React.useMemo(() => {\n      const screens = createPathConfigForStaticNavigation(\n        tree,\n        { initialRouteName: linking?.config?.initialRouteName },\n        linking?.enabled === 'auto'\n      );\n\n      if (!screens) return;\n\n      return {\n        path: linking?.config?.path,\n        initialRouteName: linking?.config?.initialRouteName,\n        screens,\n      };\n    }, [\n      linking?.enabled,\n      linking?.config?.path,\n      linking?.config?.initialRouteName,\n    ]);\n\n    const memoizedLinking = React.useMemo(() => {\n      if (!linking) {\n        return undefined;\n      }\n\n      const enabled =\n        typeof linking.enabled === 'boolean'\n          ? linking.enabled\n          : linkingConfig?.screens != null;\n\n      return {\n        ...linking,\n        enabled,\n        config: linkingConfig,\n      };\n    }, [linking, linkingConfig]);\n\n    if (linking?.enabled === true && linkingConfig?.screens == null) {\n      throw new Error(\n        'Linking is enabled but no linking configuration was found for the screens.\\n\\n' +\n          'To solve this:\\n' +\n          \"- Specify a 'linking' property for the screens you want to link to.\\n\" +\n          \"- Or set 'linking.enabled' to 'auto' to generate paths automatically.\\n\\n\" +\n          'See usage guide: https://reactnavigation.org/docs/static-configuration#linking'\n      );\n    }\n\n    return (\n      <NavigationContainer {...rest} ref={ref} linking={memoizedLinking}>\n        <Component />\n      </NavigationContainer>\n    );\n  }\n\n  return React.forwardRef(Navigation);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}