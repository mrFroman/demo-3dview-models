{"ast":null,"code":"'use strict';\n\nfunction _extends() {\n  return _extends = Object.assign ? Object.assign.bind() : function (n) {\n    for (var e = 1; e < arguments.length; e++) {\n      var t = arguments[e];\n      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);\n    }\n    return n;\n  }, _extends.apply(null, arguments);\n}\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport \"../layoutReanimation/animationsManager.js\";\nimport invariant from 'invariant';\nimport { adaptViewConfig } from \"../ConfigHelper.js\";\nimport { findHostInstance } from '../platform-specific/findHostInstance';\nimport { enableLayoutAnimations } from \"../core.js\";\nimport { SharedTransition, LayoutAnimationType } from \"../layoutReanimation/index.js\";\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { removeFromPropsRegistry } from \"../PropsRegistry.js\";\nimport { getReduceMotionFromConfig } from \"../animation/util.js\";\nimport { maybeBuild } from \"../animationBuilder.js\";\nimport { SkipEnteringContext } from \"../component/LayoutAnimationConfig.js\";\nimport JSPropsUpdater from './JSPropsUpdater';\nimport { flattenArray } from \"./utils.js\";\nimport setAndForwardRef from \"./setAndForwardRef.js\";\nimport { isFabric, isJest, isWeb, shouldBeUseWeb } from \"../PlatformChecker.js\";\nimport { InlinePropManager } from \"./InlinePropManager.js\";\nimport { PropsFilter } from \"./PropsFilter.js\";\nimport { startWebLayoutAnimation, tryActivateLayoutTransition, configureWebLayoutAnimations, getReducedMotionFromConfig, saveSnapshot } from \"../layoutReanimation/web/index.js\";\nimport { updateLayoutAnimations } from \"../UpdateLayoutAnimations.js\";\nimport { addHTMLMutationObserver } from \"../layoutReanimation/web/domUtils.js\";\nimport { getViewInfo } from \"./getViewInfo.js\";\nimport { NativeEventsManager } from \"./NativeEventsManager.js\";\nimport { ReanimatedError } from \"../errors.js\";\nconst IS_WEB = isWeb();\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\nfunction onlyAnimatedStyles(styles) {\n  return styles.filter(style => style?.viewDescriptors);\n}\nlet id = 0;\nexport function createAnimatedComponent(Component, options) {\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`);\n  class AnimatedComponent extends React.Component {\n    _styles = null;\n    _isFirstRender = true;\n    jestAnimatedStyle = {\n      value: {}\n    };\n    _componentRef = null;\n    _sharedElementTransition = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    static contextType = SkipEnteringContext;\n    reanimatedID = id++;\n    constructor(props) {\n      super(props);\n      if (IS_JEST) {\n        this.jestAnimatedStyle = {\n          value: {}\n        };\n      }\n      const entering = this.props.entering;\n      if (entering && isFabric()) {\n        updateLayoutAnimations(this.reanimatedID, LayoutAnimationType.ENTERING, maybeBuild(entering, this.props?.style, AnimatedComponent.displayName));\n      }\n    }\n    componentDidMount() {\n      if (!IS_WEB) {\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      this._NativeEventsManager?.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n      if (IS_WEB) {\n        if (this.props.exiting) {\n          saveSnapshot(this._componentRef);\n        }\n        if (!this.props.entering || getReducedMotionFromConfig(this.props.entering)) {\n          this._isFirstRender = false;\n          return;\n        }\n        const skipEntering = this.context?.current;\n        if (!skipEntering) {\n          startWebLayoutAnimation(this.props, this._componentRef, LayoutAnimationType.ENTERING);\n        } else {\n          this._componentRef.style.visibility = 'initial';\n        }\n      }\n      this._isFirstRender = false;\n    }\n    componentWillUnmount() {\n      this._NativeEventsManager?.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      this._sharedElementTransition?.unregisterTransition(this.getComponentViewTag(), true);\n      const exiting = this.props.exiting;\n      if (IS_WEB && this._componentRef && exiting && !getReducedMotionFromConfig(exiting)) {\n        addHTMLMutationObserver();\n        startWebLayoutAnimation(this.props, this._componentRef, LayoutAnimationType.EXITING);\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          updateLayoutAnimations(this.getComponentViewTag(), LayoutAnimationType.EXITING, maybeBuild(exiting, this.props?.style, AnimatedComponent.displayName));\n        }\n      }\n    }\n    getComponentViewTag() {\n      return this._getViewInfo().viewTag;\n    }\n    _detachStyles() {\n      const viewTag = this.getComponentViewTag();\n      if (viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(viewTag);\n        }\n        if (isFabric()) {\n          removeFromPropsRegistry(viewTag);\n        }\n      }\n    }\n    _updateFromNative(props) {\n      if (options?.setNativeProps) {\n        options.setNativeProps(this._componentRef, props);\n      } else {\n        this._componentRef?.setNativeProps?.(props);\n      }\n    }\n    _getViewInfo() {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n      let viewTag;\n      let viewName;\n      let shadowNodeWrapper = null;\n      let viewConfig;\n      if (SHOULD_BE_USE_WEB) {\n        viewTag = this._componentRef;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        const hostInstance = findHostInstance(this);\n        if (!hostInstance) {\n          throw new ReanimatedError('Cannot find host instance for this component. Maybe it renders nothing?');\n        }\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric() ? getShadowNodeWrapperFromRef(this, hostInstance) : null;\n      }\n      this._viewInfo = {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      };\n      return this._viewInfo;\n    }\n    _attachAnimatedStyles() {\n      const styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n      const {\n        viewTag,\n        viewName,\n        shadowNodeWrapper,\n        viewConfig\n      } = this._getViewInfo();\n      const hasReanimated2Props = this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n      if (prevStyles) {\n        const hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && styles[0] === prevStyles[0];\n        if (!hasOneSameStyle) {\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some(style => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n      styles.forEach(style => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper\n        });\n        if (IS_JEST) {\n          this.jestAnimatedStyle.value = Object.assign({}, this.jestAnimatedStyle.value, style.initial.value);\n          style.jestAnimatedStyle.current = this.jestAnimatedStyle;\n        }\n      });\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors.remove(viewTag);\n      }\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper: shadowNodeWrapper\n        });\n      }\n    }\n    componentDidUpdate(prevProps, _prevState, snapshot) {\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (this.props.sharedTransitionTag !== undefined || prevProps.sharedTransitionTag !== undefined) {\n        this._configureSharedTransition();\n      }\n      this._NativeEventsManager?.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n      if (IS_WEB && this.props.exiting) {\n        saveSnapshot(this._componentRef);\n      }\n      if (IS_WEB && snapshot !== null && this.props.layout && !getReducedMotionFromConfig(this.props.layout)) {\n        tryActivateLayoutTransition(this.props, this._componentRef, snapshot);\n      }\n    }\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n      const layout = this.props.layout ? maybeBuild(this.props.layout, undefined, AnimatedComponent.displayName) : undefined;\n      updateLayoutAnimations(this.getComponentViewTag(), LayoutAnimationType.LAYOUT, layout);\n    }\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n      const {\n        sharedTransitionTag\n      } = this.props;\n      if (!sharedTransitionTag) {\n        this._sharedElementTransition?.unregisterTransition(this.getComponentViewTag(), isUnmounting);\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition = this.props.sharedTransitionStyle ?? this._sharedElementTransition ?? new SharedTransition();\n      sharedElementTransition.registerTransition(this.getComponentViewTag(), sharedTransitionTag, isUnmounting);\n      this._sharedElementTransition = sharedElementTransition;\n    }\n    _resolveComponentRef = ref => {\n      const componentRef = ref;\n      if (componentRef && componentRef.getAnimatableRef) {\n        return componentRef.getAnimatableRef();\n      }\n      return componentRef;\n    };\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: ref => {\n        if (!ref) {\n          return;\n        }\n        if (ref !== this._componentRef) {\n          this._componentRef = this._resolveComponentRef(ref);\n          this._viewInfo = undefined;\n        }\n        const tag = this.getComponentViewTag();\n        const {\n          layout,\n          entering,\n          exiting,\n          sharedTransitionTag\n        } = this.props;\n        if (layout || entering || exiting || sharedTransitionTag) {\n          if (!SHOULD_BE_USE_WEB) {\n            enableLayoutAnimations(true, false);\n          }\n          if (sharedTransitionTag) {\n            this._configureSharedTransition();\n          }\n          if (exiting && isFabric()) {\n            const reduceMotionInExiting = 'getReduceMotion' in exiting && typeof exiting.getReduceMotion === 'function' ? getReduceMotionFromConfig(exiting.getReduceMotion()) : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              updateLayoutAnimations(tag, LayoutAnimationType.EXITING, maybeBuild(exiting, this.props?.style, AnimatedComponent.displayName));\n            }\n          }\n          const skipEntering = this.context?.current;\n          if (entering && !skipEntering && !IS_WEB) {\n            updateLayoutAnimations(tag, LayoutAnimationType.ENTERING, maybeBuild(entering, this.props?.style, AnimatedComponent.displayName));\n          }\n        }\n      }\n    });\n    getSnapshotBeforeUpdate() {\n      if (IS_WEB && this._componentRef?.getBoundingClientRect !== undefined) {\n        return this._componentRef.getBoundingClientRect();\n      }\n      return null;\n    }\n    render() {\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n      if (IS_JEST) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n      }\n      if (this._isFirstRender && IS_WEB && filteredProps.entering && !getReducedMotionFromConfig(filteredProps.entering)) {\n        filteredProps.style = Object.assign({}, filteredProps.style ?? {}, {\n          visibility: 'hidden'\n        });\n      }\n      const platformProps = Platform.select({\n        web: {},\n        default: {\n          collapsable: false\n        }\n      });\n      const skipEntering = this.context?.current;\n      const nativeID = skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n      const jestProps = IS_JEST ? {\n        jestInlineStyle: this.props.style,\n        jestAnimatedStyle: this.jestAnimatedStyle\n      } : {};\n      return React.createElement(Component, _extends({\n        nativeID: nativeID\n      }, filteredProps, jestProps, {\n        ref: this._setComponentRef\n      }, platformProps));\n    }\n  }\n  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || 'Component'})`;\n  return React.forwardRef((props, ref) => {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref === null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"names":["_extends","Object","assign","bind","n","e","arguments","length","t","r","hasOwnProperty","call","apply","React","Platform","invariant","adaptViewConfig","findHostInstance","enableLayoutAnimations","SharedTransition","LayoutAnimationType","getShadowNodeWrapperFromRef","removeFromPropsRegistry","getReduceMotionFromConfig","maybeBuild","SkipEnteringContext","JSPropsUpdater","flattenArray","setAndForwardRef","isFabric","isJest","isWeb","shouldBeUseWeb","InlinePropManager","PropsFilter","startWebLayoutAnimation","tryActivateLayoutTransition","configureWebLayoutAnimations","getReducedMotionFromConfig","saveSnapshot","updateLayoutAnimations","addHTMLMutationObserver","getViewInfo","NativeEventsManager","ReanimatedError","IS_WEB","IS_JEST","SHOULD_BE_USE_WEB","onlyAnimatedStyles","styles","filter","style","viewDescriptors","id","createAnimatedComponent","Component","options","prototype","isReactComponent","name","AnimatedComponent","_styles","_isFirstRender","jestAnimatedStyle","value","_componentRef","_sharedElementTransition","_jsPropsUpdater","_InlinePropManager","_PropsFilter","contextType","reanimatedID","constructor","props","entering","ENTERING","displayName","componentDidMount","_NativeEventsManager","attachEvents","addOnJSPropsChangeListener","_attachAnimatedStyles","attachInlineProps","_getViewInfo","layout","_configureLayoutTransition","exiting","skipEntering","context","current","visibility","componentWillUnmount","detachEvents","removeOnJSPropsChangeListener","_detachStyles","detachInlineProps","sharedTransitionTag","_configureSharedTransition","unregisterTransition","getComponentViewTag","EXITING","reduceMotionInExiting","getReduceMotion","viewTag","remove","animatedProps","_updateFromNative","setNativeProps","_viewInfo","undefined","viewName","shadowNodeWrapper","viewConfig","hostInstance","viewInfo","prevStyles","prevAnimatedProps","_animatedProps","hasReanimated2Props","hasOneSameStyle","prevStyle","isPresent","some","forEach","add","tag","initial","componentDidUpdate","prevProps","_prevState","snapshot","oldLayout","updateEvents","LAYOUT","isUnmounting","sharedElementTransition","sharedTransitionStyle","registerTransition","_resolveComponentRef","ref","componentRef","getAnimatableRef","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","getSnapshotBeforeUpdate","getBoundingClientRect","render","filteredProps","filterNonAnimatedProps","platformProps","select","web","default","collapsable","nativeID","jestProps","jestInlineStyle","createElement","forwardRef"],"sources":["/app/node_modules/react-native-reanimated/src/createAnimatedComponent/createAnimatedComponent.tsx"],"sourcesContent":["'use strict';\nimport type {\n  Component,\n  ComponentClass,\n  ComponentType,\n  FunctionComponent,\n  MutableRefObject,\n} from 'react';\nimport React from 'react';\nimport { Platform } from 'react-native';\nimport '../layoutReanimation/animationsManager';\nimport invariant from 'invariant';\nimport { adaptViewConfig } from '../ConfigHelper';\nimport { findHostInstance } from '../platform-specific/findHostInstance';\nimport { enableLayoutAnimations } from '../core';\nimport { SharedTransition, LayoutAnimationType } from '../layoutReanimation';\nimport type { StyleProps, ShadowNodeWrapper } from '../commonTypes';\nimport { getShadowNodeWrapperFromRef } from '../fabricUtils';\nimport { removeFromPropsRegistry } from '../PropsRegistry';\nimport { getReduceMotionFromConfig } from '../animation/util';\nimport { maybeBuild } from '../animationBuilder';\nimport { SkipEnteringContext } from '../component/LayoutAnimationConfig';\nimport type { AnimateProps } from '../helperTypes';\nimport JSPropsUpdater from './JSPropsUpdater';\nimport type {\n  AnimatedComponentProps,\n  AnimatedProps,\n  InitialComponentProps,\n  AnimatedComponentRef,\n  IAnimatedComponentInternal,\n  ViewInfo,\n  INativeEventsManager,\n  NestedArray,\n} from './commonTypes';\nimport { flattenArray } from './utils';\nimport setAndForwardRef from './setAndForwardRef';\nimport { isFabric, isJest, isWeb, shouldBeUseWeb } from '../PlatformChecker';\nimport { InlinePropManager } from './InlinePropManager';\nimport { PropsFilter } from './PropsFilter';\nimport {\n  startWebLayoutAnimation,\n  tryActivateLayoutTransition,\n  configureWebLayoutAnimations,\n  getReducedMotionFromConfig,\n  saveSnapshot,\n} from '../layoutReanimation/web';\nimport { updateLayoutAnimations } from '../UpdateLayoutAnimations';\nimport type { CustomConfig } from '../layoutReanimation/web/config';\nimport type { FlatList, FlatListProps } from 'react-native';\nimport { addHTMLMutationObserver } from '../layoutReanimation/web/domUtils';\nimport { getViewInfo } from './getViewInfo';\nimport { NativeEventsManager } from './NativeEventsManager';\nimport type { ReanimatedHTMLElement } from '../js-reanimated';\nimport { ReanimatedError } from '../errors';\n\nconst IS_WEB = isWeb();\nconst IS_JEST = isJest();\nconst SHOULD_BE_USE_WEB = shouldBeUseWeb();\n\nif (IS_WEB) {\n  configureWebLayoutAnimations();\n}\n\nfunction onlyAnimatedStyles(styles: StyleProps[]): StyleProps[] {\n  return styles.filter((style) => style?.viewDescriptors);\n}\n\ntype Options<P> = {\n  setNativeProps: (ref: AnimatedComponentRef, props: P) => void;\n};\n\n/**\n * Lets you create an Animated version of any React Native component.\n *\n * @param component - The component you want to make animatable.\n * @returns A component that Reanimated is capable of animating.\n * @see https://docs.swmansion.com/react-native-reanimated/docs/core/createAnimatedComponent\n */\n\n// Don't change the order of overloads, since such a change breaks current behavior\nexport function createAnimatedComponent<P extends object>(\n  component: FunctionComponent<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  component: ComponentClass<P>,\n  options?: Options<P>\n): ComponentClass<AnimateProps<P>>;\n\nexport function createAnimatedComponent<P extends object>(\n  // Actually ComponentType<P = {}> = ComponentClass<P> | FunctionComponent<P> but we need this overload too\n  // since some external components (like FastImage) are typed just as ComponentType\n  component: ComponentType<P>,\n  options?: Options<P>\n): FunctionComponent<AnimateProps<P>> | ComponentClass<AnimateProps<P>>;\n\n/**\n * @deprecated Please use `Animated.FlatList` component instead of calling\n *   `Animated.createAnimatedComponent(FlatList)` manually.\n */\n// @ts-ignore This is required to create this overload, since type of createAnimatedComponent is incorrect and doesn't include typeof FlatList\nexport function createAnimatedComponent(\n  component: typeof FlatList<unknown>,\n  options?: Options<any>\n): ComponentClass<AnimateProps<FlatListProps<unknown>>>;\n\nlet id = 0;\n\nexport function createAnimatedComponent(\n  Component: ComponentType<InitialComponentProps>,\n  options?: Options<InitialComponentProps>\n): any {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    `Looks like you're passing a function component \\`${Component.name}\\` to \\`createAnimatedComponent\\` function which supports only class components. Please wrap your function component with \\`React.forwardRef()\\` or use a class component instead.`\n  );\n\n  class AnimatedComponent\n    extends React.Component<AnimatedComponentProps<InitialComponentProps>>\n    implements IAnimatedComponentInternal\n  {\n    _styles: StyleProps[] | null = null;\n    _animatedProps?: Partial<AnimatedComponentProps<AnimatedProps>>;\n    _isFirstRender = true;\n    jestInlineStyle: NestedArray<StyleProps> | undefined;\n    jestAnimatedStyle: { value: StyleProps } = { value: {} };\n    _componentRef: AnimatedComponentRef | HTMLElement | null = null;\n    _sharedElementTransition: SharedTransition | null = null;\n    _jsPropsUpdater = new JSPropsUpdater();\n    _InlinePropManager = new InlinePropManager();\n    _PropsFilter = new PropsFilter();\n    _NativeEventsManager?: INativeEventsManager;\n    _viewInfo?: ViewInfo;\n    static displayName: string;\n    static contextType = SkipEnteringContext;\n    context!: React.ContextType<typeof SkipEnteringContext>;\n    reanimatedID = id++;\n\n    constructor(props: AnimatedComponentProps<InitialComponentProps>) {\n      super(props);\n      if (IS_JEST) {\n        this.jestAnimatedStyle = { value: {} };\n      }\n      const entering = this.props.entering;\n      if (entering && isFabric()) {\n        updateLayoutAnimations(\n          this.reanimatedID,\n          LayoutAnimationType.ENTERING,\n          maybeBuild(entering, this.props?.style, AnimatedComponent.displayName)\n        );\n      }\n    }\n\n    componentDidMount() {\n      if (!IS_WEB) {\n        // It exists only on native platforms. We initialize it here because the ref to the animated component is available only post-mount\n        this._NativeEventsManager = new NativeEventsManager(this, options);\n      }\n      this._NativeEventsManager?.attachEvents();\n      this._jsPropsUpdater.addOnJSPropsChangeListener(this);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      const layout = this.props.layout;\n      if (layout) {\n        this._configureLayoutTransition();\n      }\n\n      if (IS_WEB) {\n        if (this.props.exiting) {\n          saveSnapshot(this._componentRef as HTMLElement);\n        }\n\n        if (\n          !this.props.entering ||\n          getReducedMotionFromConfig(this.props.entering as CustomConfig)\n        ) {\n          this._isFirstRender = false;\n          return;\n        }\n\n        const skipEntering = this.context?.current;\n\n        if (!skipEntering) {\n          startWebLayoutAnimation(\n            this.props,\n            this._componentRef as ReanimatedHTMLElement,\n            LayoutAnimationType.ENTERING\n          );\n        } else {\n          (this._componentRef as HTMLElement).style.visibility = 'initial';\n        }\n      }\n\n      this._isFirstRender = false;\n    }\n\n    componentWillUnmount() {\n      this._NativeEventsManager?.detachEvents();\n      this._jsPropsUpdater.removeOnJSPropsChangeListener(this);\n      this._detachStyles();\n      this._InlinePropManager.detachInlineProps();\n      if (this.props.sharedTransitionTag) {\n        this._configureSharedTransition(true);\n      }\n      this._sharedElementTransition?.unregisterTransition(\n        this.getComponentViewTag(),\n        true\n      );\n\n      const exiting = this.props.exiting;\n\n      if (\n        IS_WEB &&\n        this._componentRef &&\n        exiting &&\n        !getReducedMotionFromConfig(exiting as CustomConfig)\n      ) {\n        addHTMLMutationObserver();\n\n        startWebLayoutAnimation(\n          this.props,\n          this._componentRef as ReanimatedHTMLElement,\n          LayoutAnimationType.EXITING\n        );\n      } else if (exiting && !IS_WEB && !isFabric()) {\n        const reduceMotionInExiting =\n          'getReduceMotion' in exiting &&\n          typeof exiting.getReduceMotion === 'function'\n            ? getReduceMotionFromConfig(exiting.getReduceMotion())\n            : getReduceMotionFromConfig();\n        if (!reduceMotionInExiting) {\n          updateLayoutAnimations(\n            this.getComponentViewTag(),\n            LayoutAnimationType.EXITING,\n            maybeBuild(\n              exiting,\n              this.props?.style,\n              AnimatedComponent.displayName\n            )\n          );\n        }\n      }\n    }\n\n    getComponentViewTag() {\n      return this._getViewInfo().viewTag as number;\n    }\n\n    _detachStyles() {\n      const viewTag = this.getComponentViewTag();\n      if (viewTag !== -1 && this._styles !== null) {\n        for (const style of this._styles) {\n          style.viewDescriptors.remove(viewTag);\n        }\n        if (this.props.animatedProps?.viewDescriptors) {\n          this.props.animatedProps.viewDescriptors.remove(viewTag);\n        }\n        if (isFabric()) {\n          removeFromPropsRegistry(viewTag);\n        }\n      }\n    }\n\n    _updateFromNative(props: StyleProps) {\n      if (options?.setNativeProps) {\n        options.setNativeProps(\n          this._componentRef as AnimatedComponentRef,\n          props\n        );\n      } else {\n        (this._componentRef as AnimatedComponentRef)?.setNativeProps?.(props);\n      }\n    }\n\n    _getViewInfo(): ViewInfo {\n      if (this._viewInfo !== undefined) {\n        return this._viewInfo;\n      }\n\n      let viewTag: number | HTMLElement | null;\n      let viewName: string | null;\n      let shadowNodeWrapper: ShadowNodeWrapper | null = null;\n      let viewConfig;\n\n      if (SHOULD_BE_USE_WEB) {\n        // At this point I assume that `_setComponentRef` was already called and `_component` is set.\n        // `this._component` on web represents HTMLElement of our component, that's why we use casting\n        viewTag = this._componentRef as HTMLElement;\n        viewName = null;\n        shadowNodeWrapper = null;\n        viewConfig = null;\n      } else {\n        const hostInstance = findHostInstance(this);\n        if (!hostInstance) {\n          /* \n            findHostInstance can return null for a component that doesn't render anything \n            (render function returns null). Example: \n            svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n          */\n          throw new ReanimatedError(\n            'Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n\n        const viewInfo = getViewInfo(hostInstance);\n        viewTag = viewInfo.viewTag;\n        viewName = viewInfo.viewName;\n        viewConfig = viewInfo.viewConfig;\n        shadowNodeWrapper = isFabric()\n          ? getShadowNodeWrapperFromRef(this, hostInstance)\n          : null;\n      }\n      this._viewInfo = { viewTag, viewName, shadowNodeWrapper, viewConfig };\n      return this._viewInfo;\n    }\n\n    _attachAnimatedStyles() {\n      const styles = this.props.style\n        ? onlyAnimatedStyles(flattenArray<StyleProps>(this.props.style))\n        : [];\n      const prevStyles = this._styles;\n      this._styles = styles;\n\n      const prevAnimatedProps = this._animatedProps;\n      this._animatedProps = this.props.animatedProps;\n\n      const { viewTag, viewName, shadowNodeWrapper, viewConfig } =\n        this._getViewInfo();\n\n      // update UI props whitelist for this view\n      const hasReanimated2Props =\n        this.props.animatedProps?.viewDescriptors || styles.length;\n      if (hasReanimated2Props && viewConfig) {\n        adaptViewConfig(viewConfig);\n      }\n\n      // remove old styles\n      if (prevStyles) {\n        // in most of the cases, views have only a single animated style and it remains unchanged\n        const hasOneSameStyle =\n          styles.length === 1 &&\n          prevStyles.length === 1 &&\n          styles[0] === prevStyles[0];\n\n        if (!hasOneSameStyle) {\n          // otherwise, remove each style that is not present in new styles\n          for (const prevStyle of prevStyles) {\n            const isPresent = styles.some((style) => style === prevStyle);\n            if (!isPresent) {\n              prevStyle.viewDescriptors.remove(viewTag);\n            }\n          }\n        }\n      }\n\n      styles.forEach((style) => {\n        style.viewDescriptors.add({\n          tag: viewTag,\n          name: viewName,\n          shadowNodeWrapper,\n        });\n        if (IS_JEST) {\n          /**\n           * We need to connect Jest's TestObject instance whose contains just\n           * props object with the updateProps() function where we update the\n           * properties of the component. We can't update props object directly\n           * because TestObject contains a copy of props - look at render\n           * function: const props = this._filterNonAnimatedProps(this.props);\n           */\n          this.jestAnimatedStyle.value = {\n            ...this.jestAnimatedStyle.value,\n            ...style.initial.value,\n          };\n          style.jestAnimatedStyle.current = this.jestAnimatedStyle;\n        }\n      });\n\n      // detach old animatedProps\n      if (prevAnimatedProps && prevAnimatedProps !== this.props.animatedProps) {\n        prevAnimatedProps.viewDescriptors!.remove(viewTag as number);\n      }\n\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptors) {\n        this.props.animatedProps.viewDescriptors.add({\n          tag: viewTag as number,\n          name: viewName!,\n          shadowNodeWrapper: shadowNodeWrapper!,\n        });\n      }\n    }\n\n    componentDidUpdate(\n      prevProps: AnimatedComponentProps<InitialComponentProps>,\n      _prevState: Readonly<unknown>,\n      // This type comes straight from React\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      snapshot: DOMRect | null\n    ) {\n      const layout = this.props.layout;\n      const oldLayout = prevProps.layout;\n      if (layout !== oldLayout) {\n        this._configureLayoutTransition();\n      }\n      if (\n        this.props.sharedTransitionTag !== undefined ||\n        prevProps.sharedTransitionTag !== undefined\n      ) {\n        this._configureSharedTransition();\n      }\n      this._NativeEventsManager?.updateEvents(prevProps);\n      this._attachAnimatedStyles();\n      this._InlinePropManager.attachInlineProps(this, this._getViewInfo());\n\n      if (IS_WEB && this.props.exiting) {\n        saveSnapshot(this._componentRef as HTMLElement);\n      }\n\n      // Snapshot won't be undefined because it comes from getSnapshotBeforeUpdate method\n      if (\n        IS_WEB &&\n        snapshot !== null &&\n        this.props.layout &&\n        !getReducedMotionFromConfig(this.props.layout as CustomConfig)\n      ) {\n        tryActivateLayoutTransition(\n          this.props,\n          this._componentRef as ReanimatedHTMLElement,\n          snapshot\n        );\n      }\n    }\n\n    _configureLayoutTransition() {\n      if (IS_WEB) {\n        return;\n      }\n\n      const layout = this.props.layout\n        ? maybeBuild(\n            this.props.layout,\n            undefined /* We don't have to warn user if style has common properties with animation for LAYOUT */,\n            AnimatedComponent.displayName\n          )\n        : undefined;\n      updateLayoutAnimations(\n        this.getComponentViewTag(),\n        LayoutAnimationType.LAYOUT,\n        layout\n      );\n    }\n\n    _configureSharedTransition(isUnmounting = false) {\n      if (IS_WEB) {\n        return;\n      }\n\n      const { sharedTransitionTag } = this.props;\n      if (!sharedTransitionTag) {\n        this._sharedElementTransition?.unregisterTransition(\n          this.getComponentViewTag(),\n          isUnmounting\n        );\n        this._sharedElementTransition = null;\n        return;\n      }\n      const sharedElementTransition =\n        this.props.sharedTransitionStyle ??\n        this._sharedElementTransition ??\n        new SharedTransition();\n      sharedElementTransition.registerTransition(\n        this.getComponentViewTag(),\n        sharedTransitionTag,\n        isUnmounting\n      );\n      this._sharedElementTransition = sharedElementTransition;\n    }\n\n    _resolveComponentRef = (ref: Component | HTMLElement | null) => {\n      const componentRef = ref as AnimatedComponentRef;\n      // Component can specify ref which should be animated when animated version of the component is created.\n      // Otherwise, we animate the component itself.\n      if (componentRef && componentRef.getAnimatableRef) {\n        return componentRef.getAnimatableRef();\n      }\n      return componentRef;\n    };\n\n    _setComponentRef = setAndForwardRef<Component | HTMLElement>({\n      getForwardedRef: () =>\n        this.props.forwardedRef as MutableRefObject<\n          Component<Record<string, unknown>, Record<string, unknown>, unknown>\n        >,\n      setLocalRef: (ref) => {\n        if (!ref) {\n          // component has been unmounted\n          return;\n        }\n        if (ref !== this._componentRef) {\n          this._componentRef = this._resolveComponentRef(ref);\n          // if ref is changed, reset viewInfo\n          this._viewInfo = undefined;\n        }\n        const tag = this.getComponentViewTag();\n\n        const { layout, entering, exiting, sharedTransitionTag } = this.props;\n        if (layout || entering || exiting || sharedTransitionTag) {\n          if (!SHOULD_BE_USE_WEB) {\n            enableLayoutAnimations(true, false);\n          }\n\n          if (sharedTransitionTag) {\n            this._configureSharedTransition();\n          }\n          if (exiting && isFabric()) {\n            const reduceMotionInExiting =\n              'getReduceMotion' in exiting &&\n              typeof exiting.getReduceMotion === 'function'\n                ? getReduceMotionFromConfig(exiting.getReduceMotion())\n                : getReduceMotionFromConfig();\n            if (!reduceMotionInExiting) {\n              updateLayoutAnimations(\n                tag,\n                LayoutAnimationType.EXITING,\n                maybeBuild(\n                  exiting,\n                  this.props?.style,\n                  AnimatedComponent.displayName\n                )\n              );\n            }\n          }\n\n          const skipEntering = this.context?.current;\n          if (entering && !skipEntering && !IS_WEB) {\n            updateLayoutAnimations(\n              tag,\n              LayoutAnimationType.ENTERING,\n              maybeBuild(\n                entering,\n                this.props?.style,\n                AnimatedComponent.displayName\n              )\n            );\n          }\n        }\n      },\n    });\n\n    // This is a component lifecycle method from React, therefore we are not calling it directly.\n    // It is called before the component gets rerendered. This way we can access components' position before it changed\n    // and later on, in componentDidUpdate, calculate translation for layout transition.\n    getSnapshotBeforeUpdate() {\n      if (\n        IS_WEB &&\n        (this._componentRef as HTMLElement)?.getBoundingClientRect !== undefined\n      ) {\n        return (this._componentRef as HTMLElement).getBoundingClientRect();\n      }\n\n      return null;\n    }\n\n    render() {\n      const filteredProps = this._PropsFilter.filterNonAnimatedProps(this);\n\n      if (IS_JEST) {\n        filteredProps.jestAnimatedStyle = this.jestAnimatedStyle;\n      }\n\n      // Layout animations on web are set inside `componentDidMount` method, which is called after first render.\n      // Because of that we can encounter a situation in which component is visible for a short amount of time, and later on animation triggers.\n      // I've tested that on various browsers and devices and it did not happen to me. To be sure that it won't happen to someone else,\n      // I've decided to hide component at first render. Its visibility is reset in `componentDidMount`.\n      if (\n        this._isFirstRender &&\n        IS_WEB &&\n        filteredProps.entering &&\n        !getReducedMotionFromConfig(filteredProps.entering as CustomConfig)\n      ) {\n        filteredProps.style = {\n          ...(filteredProps.style ?? {}),\n          visibility: 'hidden', // Hide component until `componentDidMount` triggers\n        };\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n\n      const skipEntering = this.context?.current;\n      const nativeID =\n        skipEntering || !isFabric() ? undefined : `${this.reanimatedID}`;\n\n      const jestProps = IS_JEST\n        ? {\n            jestInlineStyle: this.props.style,\n            jestAnimatedStyle: this.jestAnimatedStyle,\n          }\n        : {};\n\n      return (\n        <Component\n          nativeID={nativeID}\n          {...filteredProps}\n          {...jestProps}\n          // Casting is used here, because ref can be null - in that case it cannot be assigned to HTMLElement.\n          // After spending some time trying to figure out what to do with this problem, we decided to leave it this way\n          ref={this._setComponentRef as (ref: Component) => void}\n          {...platformProps}\n        />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef<Component>((props, ref) => {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref === null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}