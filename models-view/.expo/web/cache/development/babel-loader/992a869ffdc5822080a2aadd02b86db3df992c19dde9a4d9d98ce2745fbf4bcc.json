{"ast":null,"code":"'use strict';\n\nimport { has } from \"./utils.js\";\nimport { WorkletEventHandler } from \"../WorkletEventHandler.js\";\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\nexport class NativeEventsManager {\n  #managedComponent;\n  #componentOptions;\n  #eventViewTag = -1;\n  constructor(component, options) {\n    this.#managedComponent = component;\n    this.#componentOptions = options;\n    this.#eventViewTag = this.getEventViewTag();\n  }\n  attachEvents() {\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      handler.registerForEvents(this.#eventViewTag, key);\n    });\n  }\n  detachEvents() {\n    executeForEachEventHandler(this.#managedComponent.props, (_key, handler) => {\n      handler.unregisterFromEvents(this.#eventViewTag);\n    });\n  }\n  updateEvents(prevProps) {\n    const computedEventTag = this.getEventViewTag(true);\n    if (this.#eventViewTag !== computedEventTag) {\n      executeForEachEventHandler(prevProps, (_key, handler) => {\n        handler.unregisterFromEvents(this.#eventViewTag);\n      });\n      this.#eventViewTag = computedEventTag;\n      this.attachEvents();\n      return;\n    }\n    executeForEachEventHandler(prevProps, (key, prevHandler) => {\n      const newProp = this.#managedComponent.props[key];\n      if (!newProp) {\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n      } else if (isWorkletEventHandler(newProp) && newProp.workletEventHandler !== prevHandler) {\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n        newProp.workletEventHandler.registerForEvents(this.#eventViewTag);\n      }\n    });\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      if (!prevProps[key]) {\n        handler.registerForEvents(this.#eventViewTag);\n      }\n    });\n  }\n  getEventViewTag(componentUpdate = false) {\n    const componentAnimatedRef = this.#managedComponent._componentRef;\n    if (componentAnimatedRef.getScrollableNode) {\n      const scrollableNode = componentAnimatedRef.getScrollableNode();\n      if (typeof scrollableNode === 'number') {\n        return scrollableNode;\n      }\n      return findNodeHandle(scrollableNode) ?? -1;\n    }\n    if (this.#componentOptions?.setNativeProps) {\n      return findNodeHandle(this.#managedComponent) ?? -1;\n    }\n    if (!componentUpdate) {\n      return this.#managedComponent.getComponentViewTag();\n    }\n    if (componentAnimatedRef.__nativeTag || componentAnimatedRef._nativeTag) {\n      return componentAnimatedRef.__nativeTag ?? componentAnimatedRef._nativeTag ?? -1;\n    }\n    return findNodeHandle(componentAnimatedRef) ?? -1;\n  }\n}\nfunction isWorkletEventHandler(prop) {\n  return has('workletEventHandler', prop) && prop.workletEventHandler instanceof WorkletEventHandler;\n}\nfunction executeForEachEventHandler(props, callback) {\n  for (const key in props) {\n    const prop = props[key];\n    if (isWorkletEventHandler(prop)) {\n      callback(key, prop.workletEventHandler);\n    }\n  }\n}","map":{"version":3,"names":["has","WorkletEventHandler","findNodeHandle","NativeEventsManager","managedComponent","componentOptions","eventViewTag","constructor","component","options","getEventViewTag","attachEvents","executeForEachEventHandler","props","key","handler","registerForEvents","detachEvents","_key","unregisterFromEvents","updateEvents","prevProps","computedEventTag","prevHandler","newProp","isWorkletEventHandler","workletEventHandler","componentUpdate","componentAnimatedRef","_componentRef","getScrollableNode","scrollableNode","setNativeProps","getComponentViewTag","__nativeTag","_nativeTag","prop","callback"],"sources":["/app/node_modules/react-native-reanimated/src/createAnimatedComponent/NativeEventsManager.ts"],"sourcesContent":["'use strict';\nimport type {\n  INativeEventsManager,\n  IAnimatedComponentInternal,\n  AnimatedComponentProps,\n  InitialComponentProps,\n  AnimatedComponentRef,\n} from './commonTypes';\nimport { has } from './utils';\nimport { WorkletEventHandler } from '../WorkletEventHandler';\nimport { findNodeHandle } from '../platformFunctions/findNodeHandle';\n\nexport class NativeEventsManager implements INativeEventsManager {\n  readonly #managedComponent: ManagedAnimatedComponent;\n  readonly #componentOptions?: ComponentOptions;\n  #eventViewTag = -1;\n\n  constructor(component: ManagedAnimatedComponent, options?: ComponentOptions) {\n    this.#managedComponent = component;\n    this.#componentOptions = options;\n    this.#eventViewTag = this.getEventViewTag();\n  }\n\n  public attachEvents() {\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      handler.registerForEvents(this.#eventViewTag, key);\n    });\n  }\n\n  public detachEvents() {\n    executeForEachEventHandler(\n      this.#managedComponent.props,\n      (_key, handler) => {\n        handler.unregisterFromEvents(this.#eventViewTag);\n      }\n    );\n  }\n\n  public updateEvents(\n    prevProps: AnimatedComponentProps<InitialComponentProps>\n  ) {\n    const computedEventTag = this.getEventViewTag(true);\n    // If the event view tag changes, we need to completely re-mount all events\n    if (this.#eventViewTag !== computedEventTag) {\n      // Remove all bindings from previous props that ran on the old viewTag\n      executeForEachEventHandler(prevProps, (_key, handler) => {\n        handler.unregisterFromEvents(this.#eventViewTag);\n      });\n      // We don't need to unregister from current (new) props, because their events weren't registered yet\n      // Replace the view tag\n      this.#eventViewTag = computedEventTag;\n      // Attach the events with a new viewTag\n      this.attachEvents();\n      return;\n    }\n\n    executeForEachEventHandler(prevProps, (key, prevHandler) => {\n      const newProp = this.#managedComponent.props[key];\n      if (!newProp) {\n        // Prop got deleted\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n      } else if (\n        isWorkletEventHandler(newProp) &&\n        newProp.workletEventHandler !== prevHandler\n      ) {\n        // Prop got changed\n        prevHandler.unregisterFromEvents(this.#eventViewTag);\n        newProp.workletEventHandler.registerForEvents(this.#eventViewTag);\n      }\n    });\n\n    executeForEachEventHandler(this.#managedComponent.props, (key, handler) => {\n      if (!prevProps[key]) {\n        // Prop got added\n        handler.registerForEvents(this.#eventViewTag);\n      }\n    });\n  }\n\n  private getEventViewTag(componentUpdate: boolean = false) {\n    // Get the tag for registering events - since the event emitting view can be nested inside the main component\n    const componentAnimatedRef = this.#managedComponent\n      ._componentRef as AnimatedComponentRef & {\n      // Fabric\n      __nativeTag?: number;\n      // Paper\n      _nativeTag?: number;\n    };\n    if (componentAnimatedRef.getScrollableNode) {\n      /*\n        In most cases, getScrollableNode() returns a view tag, and findNodeHandle is not required. \n        However, to cover more exotic list cases, we will continue to use findNodeHandle \n        for consistency. For numerical values, findNodeHandle should return the value immediately, \n        as documented here: https://github.com/facebook/react/blob/91061073d57783c061889ac6720ef1ab7f0c2149/packages/react-native-renderer/src/ReactNativePublicCompat.js#L113\n      */\n      const scrollableNode = componentAnimatedRef.getScrollableNode();\n      if (typeof scrollableNode === 'number') {\n        return scrollableNode;\n      }\n      return findNodeHandle(scrollableNode) ?? -1;\n    }\n    if (this.#componentOptions?.setNativeProps) {\n      // This case ensures backward compatibility with components that\n      // have their own setNativeProps method passed as an option.\n      return findNodeHandle(this.#managedComponent) ?? -1;\n    }\n    if (!componentUpdate) {\n      // On the first render of a component, we may already receive a resolved view tag.\n      return this.#managedComponent.getComponentViewTag();\n    }\n    if (componentAnimatedRef.__nativeTag || componentAnimatedRef._nativeTag) {\n      /*\n        Fast path for native refs,\n        _nativeTag is used by Paper components,\n        __nativeTag is used by Fabric components.\n      */\n      return (\n        componentAnimatedRef.__nativeTag ??\n        componentAnimatedRef._nativeTag ??\n        -1\n      );\n    }\n    /*\n      When a component is updated, a child could potentially change and have a different \n      view tag. This can occur with a GestureDetector component.\n    */\n    return findNodeHandle(componentAnimatedRef) ?? -1;\n  }\n}\n\nfunction isWorkletEventHandler(\n  prop: unknown\n): prop is WorkletEventHandlerHolder {\n  return (\n    has('workletEventHandler', prop) &&\n    prop.workletEventHandler instanceof WorkletEventHandler\n  );\n}\n\nfunction executeForEachEventHandler(\n  props: AnimatedComponentProps<InitialComponentProps>,\n  callback: (\n    key: string,\n    handler: InstanceType<typeof WorkletEventHandler>\n  ) => void\n) {\n  for (const key in props) {\n    const prop = props[key];\n    if (isWorkletEventHandler(prop)) {\n      callback(key, prop.workletEventHandler);\n    }\n  }\n}\n\ntype ManagedAnimatedComponent = React.Component<\n  AnimatedComponentProps<InitialComponentProps>\n> &\n  IAnimatedComponentInternal;\n\ntype ComponentOptions = {\n  setNativeProps: (\n    ref: AnimatedComponentRef,\n    props: InitialComponentProps\n  ) => void;\n};\n\ntype WorkletEventHandlerHolder = {\n  workletEventHandler: InstanceType<typeof WorkletEventHandler>;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}