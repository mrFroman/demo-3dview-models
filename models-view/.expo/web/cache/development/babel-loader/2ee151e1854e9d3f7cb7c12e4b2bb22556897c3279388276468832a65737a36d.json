{"ast":null,"code":"import MetroHMRClient from 'metro-runtime/src/modules/HMRClient';\nimport prettyFormat, { plugins } from 'pretty-format';\nimport LoadingView from './LoadingView';\nimport LogBox from './error-overlay/LogBox';\nimport getDevServer from './getDevServer';\nconst pendingEntryPoints = [];\nconst prettyFormatFunc = typeof prettyFormat === 'function' ? prettyFormat : prettyFormat.default;\nlet hmrClient = null;\nlet hmrUnavailableReason = null;\nlet currentCompileErrorMessage = null;\nlet didConnect = false;\nconst pendingLogs = [];\nfunction assert(foo, msg) {\n  if (!foo) throw new Error(msg);\n}\nconst HMRClient = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.send(JSON.stringify({\n      type: 'log-opt-in'\n    }));\n    const hasUpdates = hmrClient.hasPendingUpdates();\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n    showCompileError();\n  },\n  disable() {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n  registerBundle(requestUrl) {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(JSON.stringify({\n        type: 'log',\n        level,\n        platform: 'web',\n        mode: 'BRIDGE',\n        data: data.map(item => typeof item === 'string' ? item : prettyFormatFunc(item, {\n          escapeString: true,\n          highlight: true,\n          maxDepth: 3,\n          min: true,\n          plugins: [plugins.ReactElement]\n        }))\n      }));\n    } catch {}\n  },\n  setup({\n    isEnabled\n  }) {\n    assert(!hmrClient, 'Cannot initialize hmrClient twice');\n    const serverScheme = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const client = new MetroHMRClient(`${serverScheme}://${window.location.host}/hot`);\n    hmrClient = client;\n    const {\n      fullBundleUrl\n    } = getDevServer();\n    pendingEntryPoints.push(fullBundleUrl);\n    client.on('connection-error', e => {\n      let error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${window.location.host}\n \n Error: ${e.message}`;\n      setHMRUnavailableReason(error);\n    });\n    client.on('update-start', ({\n      isInitialUpdate\n    }) => {\n      currentCompileErrorMessage = null;\n      didConnect = true;\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n    client.on('update', ({\n      isInitialUpdate\n    }) => {\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox.clearAllLogs();\n      }\n    });\n    client.on('update-done', () => {\n      LoadingView.hide();\n    });\n    client.on('error', data => {\n      LoadingView.hide();\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on('close', closeEvent => {\n      LoadingView.hide();\n      const isNormalOrUnsetCloseReason = closeEvent == null || closeEvent.code === 1000 || closeEvent.code === 1005 || closeEvent.code == null;\n      setHMRUnavailableReason(`${isNormalOrUnsetCloseReason ? 'Disconnected from Metro.' : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`}\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `);\n    });\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  }\n};\nfunction setHMRUnavailableReason(reason) {\n  assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n  hmrUnavailableReason = reason;\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    window.location.reload();\n    return;\n  }\n  if (pendingEntryPoints.length > 0) {\n    client?.send(JSON.stringify({\n      type: 'register-entrypoints',\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\nfunction dismissRedbox() {}\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n  dismissRedbox();\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n  const error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\nexport default HMRClient;","map":{"version":3,"names":["MetroHMRClient","prettyFormat","plugins","LoadingView","LogBox","getDevServer","pendingEntryPoints","prettyFormatFunc","default","hmrClient","hmrUnavailableReason","currentCompileErrorMessage","didConnect","pendingLogs","assert","foo","msg","Error","HMRClient","enable","send","JSON","stringify","type","hasUpdates","hasPendingUpdates","showMessage","hide","showCompileError","disable","registerBundle","requestUrl","push","registerBundleEntryPoints","log","level","data","length","shift","platform","mode","map","item","escapeString","highlight","maxDepth","min","ReactElement","setup","isEnabled","serverScheme","window","location","protocol","client","host","fullBundleUrl","on","e","error","message","setHMRUnavailableReason","isInitialUpdate","dismissRedbox","clearAllLogs","close","closeEvent","isNormalOrUnsetCloseReason","code","reason","flushEarlyLogs","console","warn","reload","entryPoints","forEach","preventSymbolication"],"sources":["/app/node_modules/@expo/metro-runtime/src/HMRClient.ts"],"sourcesContent":["/**\n * Copyright (c) 650 Industries.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on this but with web support:\n * https://github.com/facebook/react-native/blob/086714b02b0fb838dee5a66c5bcefe73b53cf3df/Libraries/Utilities/HMRClient.js\n */\nimport MetroHMRClient from 'metro-runtime/src/modules/HMRClient';\nimport prettyFormat, { plugins } from 'pretty-format';\n\nimport LoadingView from './LoadingView';\nimport LogBox from './error-overlay/LogBox';\nimport getDevServer from './getDevServer';\n\nconst pendingEntryPoints: string[] = [];\n\n// @ts-expect-error: Account for multiple versions of pretty-format inside of a monorepo.\nconst prettyFormatFunc = typeof prettyFormat === 'function' ? prettyFormat : prettyFormat.default;\n\ntype HMRClientType = {\n  send: (msg: string) => void;\n  isEnabled: () => boolean;\n  disable: () => void;\n  enable: () => void;\n  hasPendingUpdates: () => boolean;\n};\n\nlet hmrClient: HMRClientType | null = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nconst pendingLogs: [LogLevel, any[]][] = [];\n\ntype LogLevel =\n  | 'trace'\n  | 'info'\n  | 'warn'\n  | 'error'\n  | 'log'\n  | 'group'\n  | 'groupCollapsed'\n  | 'groupEnd'\n  | 'debug';\n\nexport type HMRClientNativeInterface = {\n  enable(): void;\n  disable(): void;\n  registerBundle(requestUrl: string): void;\n  log(level: LogLevel, data: any[]): void;\n  setup(props: { isEnabled: boolean }): void;\n};\n\nfunction assert(foo: any, msg: string): asserts foo {\n  if (!foo) throw new Error(msg);\n}\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient: HMRClientNativeInterface = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({ type: 'log-opt-in' }));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient!.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage('Refreshing...', 'refresh');\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: any[]) {\n    if (!hmrClient) {\n      // Catch a reasonable number of early logs\n      // in case hmrClient gets initialized later.\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(\n        JSON.stringify({\n          type: 'log',\n          level,\n          platform: 'web',\n          mode: 'BRIDGE',\n          data: data.map((item) =>\n            typeof item === 'string'\n              ? item\n              : prettyFormatFunc(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [plugins.ReactElement],\n                })\n          ),\n        })\n      );\n    } catch {\n      // If sending logs causes any failures we want to silently ignore them\n      // to ensure we do not cause infinite-logging loops.\n    }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup({ isEnabled }: { isEnabled: boolean }) {\n    assert(!hmrClient, 'Cannot initialize hmrClient twice');\n\n    const serverScheme = window.location.protocol === 'https:' ? 'wss' : 'ws';\n    const client = new MetroHMRClient(`${serverScheme}://${window.location.host}/hot`);\n    hmrClient = client;\n\n    const { fullBundleUrl } = getDevServer();\n    pendingEntryPoints.push(\n      // HMRServer understands regular bundle URLs, so prefer that in case\n      // there are any important URL parameters we can't reconstruct from\n      // `setup()`'s arguments.\n      fullBundleUrl\n    );\n\n    client.on('connection-error', (e: Error) => {\n      let error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${window.location.host}\n \n Error: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on('update-start', ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView.showMessage('Refreshing...', 'refresh');\n      }\n    });\n\n    client.on('update', ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox.clearAllLogs();\n      }\n    });\n\n    client.on('update-done', () => {\n      LoadingView.hide();\n    });\n\n    client.on('error', (data: { type: string; message: string }) => {\n      LoadingView.hide();\n\n      if (data.type === 'GraphNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro has restarted since the last edit. Reload to reconnect.');\n      } else if (data.type === 'RevisionNotFoundError') {\n        client.close();\n        setHMRUnavailableReason('Metro and the client are out of sync. Reload to reconnect.');\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n\n    client.on('close', (closeEvent: { code: number; reason: string }) => {\n      LoadingView.hide();\n\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\n      const isNormalOrUnsetCloseReason =\n        closeEvent == null ||\n        closeEvent.code === 1000 ||\n        closeEvent.code === 1005 ||\n        closeEvent.code == null;\n\n      setHMRUnavailableReason(\n        `${\n          isNormalOrUnsetCloseReason\n            ? 'Disconnected from Metro.'\n            : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`\n        }\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `\n      );\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  },\n};\n\nfunction setHMRUnavailableReason(reason: string) {\n  assert(hmrClient, 'Expected HMRClient.setup() call at startup.');\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client: HMRClientType | null) {\n  if (hmrUnavailableReason != null) {\n    // \"Bundle Splitting – Metro disconnected\"\n    window.location.reload();\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client?.send(\n      JSON.stringify({\n        type: 'register-entrypoints',\n        entryPoints: pendingEntryPoints,\n      })\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  // TODO(EvanBacon): Error overlay for web.\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  // Even if there is already a redbox, syntax errors are more important.\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\n  dismissRedbox();\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  const error = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  // @ts-expect-error\n  error.preventSymbolication = true;\n  throw error;\n}\n\nexport default HMRClient;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}