{"ast":null,"code":"\"use strict\";\n\nvar _objectWithoutPropertiesLoose = require(\"@babel/runtime/helpers/objectWithoutPropertiesLoose\");\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == typeof i ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != typeof i) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useDescriptors = useDescriptors;\nvar React = _interopRequireWildcard(require(\"react\"));\nvar _NavigationBuilderContext = require(\"./NavigationBuilderContext.js\");\nvar _NavigationContext = require(\"./NavigationContext.js\");\nvar _NavigationRouteContext = require(\"./NavigationRouteContext.js\");\nvar _SceneView = require(\"./SceneView.js\");\nvar _ThemeContext = require(\"./theming/ThemeContext.js\");\nvar _useNavigationCache = require(\"./useNavigationCache.js\");\nvar _useRouteCache = require(\"./useRouteCache.js\");\nvar _jsxRuntime = require(\"react/jsx-runtime\");\nfunction _getRequireWildcardCache(e) {\n  if (\"function\" != typeof WeakMap) return null;\n  var r = new WeakMap(),\n    t = new WeakMap();\n  return (_getRequireWildcardCache = function (e) {\n    return e ? t : r;\n  })(e);\n}\nfunction _interopRequireWildcard(e, r) {\n  if (!r && e && e.__esModule) return e;\n  if (null === e || \"object\" != typeof e && \"function\" != typeof e) return {\n    default: e\n  };\n  var t = _getRequireWildcardCache(r);\n  if (t && t.has(e)) return t.get(e);\n  var n = {\n      __proto__: null\n    },\n    a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var u in e) if (\"default\" !== u && {}.hasOwnProperty.call(e, u)) {\n    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;\n    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];\n  }\n  return n.default = e, t && t.set(e, n), n;\n}\nfunction useDescriptors({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  screenLayout,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter\n}) {\n  const theme = React.useContext(_ThemeContext.ThemeContext);\n  const [options, setOptions] = React.useState({});\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    scheduleUpdate,\n    flushUpdates,\n    stackRef\n  } = React.useContext(_NavigationBuilderContext.NavigationBuilderContext);\n  const context = React.useMemo(() => ({\n    navigation,\n    onAction,\n    addListener,\n    addKeyedListener,\n    onRouteFocus,\n    onDispatchAction,\n    onOptionsChange,\n    scheduleUpdate,\n    flushUpdates,\n    stackRef\n  }), [navigation, onAction, addListener, addKeyedListener, onRouteFocus, onDispatchAction, onOptionsChange, scheduleUpdate, flushUpdates, stackRef]);\n  const {\n    base,\n    navigations\n  } = (0, _useNavigationCache.useNavigationCache)({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter\n  });\n  const routes = (0, _useRouteCache.useRouteCache)(state.routes);\n  const getOptions = (route, navigation, overrides) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const optionsList = [screenOptions, ...(config.options ? config.options.filter(Boolean) : []), screen.options, overrides];\n    return optionsList.reduce((acc, curr) => Object.assign(acc, typeof curr !== 'function' ? curr : curr({\n      route,\n      navigation,\n      theme\n    })), {});\n  };\n  const render = (route, navigation, customOptions, routeState) => {\n    const config = screens[route.name];\n    const screen = config.props;\n    const clearOptions = () => setOptions(o => {\n      if (route.key in o) {\n        const _route$key = route.key,\n          rest = _objectWithoutPropertiesLoose(o, [_route$key].map(_toPropertyKey));\n        return rest;\n      }\n      return o;\n    });\n    const layout = screen.layout ?? config.layout ?? screenLayout;\n    let element = (0, _jsxRuntime.jsx)(_SceneView.SceneView, {\n      navigation: navigation,\n      route: route,\n      screen: screen,\n      routeState: routeState,\n      getState: getState,\n      setState: setState,\n      options: customOptions,\n      clearOptions: clearOptions\n    });\n    if (layout != null) {\n      element = layout({\n        route,\n        navigation,\n        theme,\n        children: element\n      });\n    }\n    return (0, _jsxRuntime.jsx)(_NavigationBuilderContext.NavigationBuilderContext.Provider, {\n      value: context,\n      children: (0, _jsxRuntime.jsx)(_NavigationContext.NavigationContext.Provider, {\n        value: navigation,\n        children: (0, _jsxRuntime.jsx)(_NavigationRouteContext.NavigationRouteContext.Provider, {\n          value: route,\n          children: element\n        })\n      })\n    }, route.key);\n  };\n  const descriptors = routes.reduce((acc, route, i) => {\n    const navigation = navigations[route.key];\n    const customOptions = getOptions(route, navigation, options[route.key]);\n    const element = render(route, navigation, customOptions, state.routes[i].state);\n    acc[route.key] = {\n      route,\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions\n    };\n    return acc;\n  }, {});\n  const describe = (route, placeholder) => {\n    if (!placeholder) {\n      if (!(route.key in descriptors)) {\n        throw new Error(`Couldn't find a route with the key ${route.key}.`);\n      }\n      return descriptors[route.key];\n    }\n    const navigation = base;\n    const customOptions = getOptions(route, navigation, {});\n    const element = render(route, navigation, customOptions, undefined);\n    return {\n      route,\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions\n    };\n  };\n  return {\n    describe,\n    descriptors\n  };\n}","map":{"version":3,"names":["React","_interopRequireWildcard","require","_NavigationBuilderContext","_NavigationContext","_NavigationRouteContext","_SceneView","_ThemeContext","_useNavigationCache","_useRouteCache","_jsxRuntime","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","default","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","useDescriptors","state","screens","navigation","screenOptions","screenLayout","onAction","getState","setState","addListener","addKeyedListener","onRouteFocus","router","emitter","theme","useContext","ThemeContext","options","setOptions","useState","onDispatchAction","onOptionsChange","scheduleUpdate","flushUpdates","stackRef","NavigationBuilderContext","context","useMemo","base","navigations","useNavigationCache","routes","useRouteCache","getOptions","route","overrides","config","name","screen","props","optionsList","filter","Boolean","reduce","acc","curr","assign","render","customOptions","routeState","clearOptions","o","key","_route$key","rest","_objectWithoutPropertiesLoose","map","_toPropertyKey","layout","element","jsx","SceneView","children","Provider","value","NavigationContext","NavigationRouteContext","descriptors","describe","placeholder","Error","undefined"],"sources":["/app/node_modules/@react-navigation/core/src/useDescriptors.tsx"],"sourcesContent":["import type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Router,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport {\n  type AddKeyedListener,\n  type AddListener,\n  NavigationBuilderContext,\n} from './NavigationBuilderContext';\nimport { NavigationContext } from './NavigationContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { SceneView } from './SceneView';\nimport { ThemeContext } from './theming/ThemeContext';\nimport type {\n  Descriptor,\n  EventMapBase,\n  NavigationHelpers,\n  NavigationProp,\n  RouteConfig,\n  RouteProp,\n} from './types';\nimport type { NavigationEventEmitter } from './useEventEmitter';\nimport { useNavigationCache } from './useNavigationCache';\nimport { useRouteCache } from './useRouteCache';\n\nexport type ScreenConfigWithParent<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n> = {\n  keys: (string | undefined)[];\n  options: (ScreenOptionsOrCallback<ScreenOptions> | undefined)[] | undefined;\n  layout: ScreenLayout | undefined;\n  props: RouteConfig<\n    ParamListBase,\n    string,\n    State,\n    ScreenOptions,\n    EventMap,\n    unknown\n  >;\n};\n\ntype ScreenLayout = (props: {\n  route: RouteProp<ParamListBase, string>;\n  navigation: any;\n  theme: ReactNavigation.Theme;\n  children: React.ReactElement;\n}) => React.ReactElement;\n\ntype ScreenOptionsOrCallback<ScreenOptions extends {}> =\n  | ScreenOptions\n  | ((props: {\n      route: RouteProp<ParamListBase, string>;\n      navigation: any;\n      theme: ReactNavigation.Theme;\n    }) => ScreenOptions);\n\ntype Options<\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n> = {\n  state: State;\n  screens: Record<\n    string,\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>\n  >;\n  navigation: NavigationHelpers<ParamListBase>;\n  screenOptions: ScreenOptionsOrCallback<ScreenOptions> | undefined;\n  screenLayout: ScreenLayout | undefined;\n  onAction: (action: NavigationAction) => boolean;\n  getState: () => State;\n  setState: (state: State) => void;\n  addListener: AddListener;\n  addKeyedListener: AddKeyedListener;\n  onRouteFocus: (key: string) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter<EventMap>;\n};\n\n/**\n * Hook to create descriptor objects for the child routes.\n *\n * A descriptor object provides 3 things:\n * - Helper method to render a screen\n * - Options specified by the screen for the navigator\n * - Navigation object intended for the route\n */\nexport function useDescriptors<\n  State extends NavigationState,\n  ActionHelpers extends Record<string, () => void>,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>({\n  state,\n  screens,\n  navigation,\n  screenOptions,\n  screenLayout,\n  onAction,\n  getState,\n  setState,\n  addListener,\n  addKeyedListener,\n  onRouteFocus,\n  router,\n  emitter,\n}: Options<State, ScreenOptions, EventMap>) {\n  const theme = React.useContext(ThemeContext);\n  const [options, setOptions] = React.useState<Record<string, ScreenOptions>>(\n    {}\n  );\n  const {\n    onDispatchAction,\n    onOptionsChange,\n    scheduleUpdate,\n    flushUpdates,\n    stackRef,\n  } = React.useContext(NavigationBuilderContext);\n\n  const context = React.useMemo(\n    () => ({\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      scheduleUpdate,\n      flushUpdates,\n      stackRef,\n    }),\n    [\n      navigation,\n      onAction,\n      addListener,\n      addKeyedListener,\n      onRouteFocus,\n      onDispatchAction,\n      onOptionsChange,\n      scheduleUpdate,\n      flushUpdates,\n      stackRef,\n    ]\n  );\n\n  const { base, navigations } = useNavigationCache<\n    State,\n    ScreenOptions,\n    EventMap,\n    ActionHelpers\n  >({\n    state,\n    getState,\n    navigation,\n    setOptions,\n    router,\n    emitter,\n  });\n\n  const routes = useRouteCache(state.routes);\n\n  const getOptions = (\n    route: RouteProp<ParamListBase, string>,\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      State,\n      ScreenOptions,\n      EventMap\n    >,\n    overrides: Record<string, ScreenOptions>\n  ) => {\n    const config = screens[route.name];\n    const screen = config.props;\n\n    const optionsList = [\n      // The default `screenOptions` passed to the navigator\n      screenOptions,\n      // The `screenOptions` props passed to `Group` elements\n      ...((config.options\n        ? config.options.filter(Boolean)\n        : []) as ScreenOptionsOrCallback<ScreenOptions>[]),\n      // The `options` prop passed to `Screen` elements,\n      screen.options,\n      // The options set via `navigation.setOptions`\n      overrides,\n    ];\n\n    return optionsList.reduce<ScreenOptions>(\n      (acc, curr) =>\n        Object.assign(\n          acc,\n          // @ts-expect-error: we check for function but TS still complains\n          typeof curr !== 'function' ? curr : curr({ route, navigation, theme })\n        ),\n      {} as ScreenOptions\n    );\n  };\n\n  const render = (\n    route: RouteProp<ParamListBase, string>,\n    navigation: NavigationProp<\n      ParamListBase,\n      string,\n      string | undefined,\n      State,\n      ScreenOptions,\n      EventMap\n    >,\n    customOptions: ScreenOptions,\n    routeState: NavigationState | PartialState<NavigationState> | undefined\n  ) => {\n    const config = screens[route.name];\n    const screen = config.props;\n\n    const clearOptions = () =>\n      setOptions((o) => {\n        if (route.key in o) {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const { [route.key]: _, ...rest } = o;\n          return rest;\n        }\n\n        return o;\n      });\n\n    const layout =\n      // The `layout` prop passed to `Screen` elements,\n      screen.layout ??\n      // The `screenLayout` props passed to `Group` elements\n      config.layout ??\n      // The default `screenLayout` passed to the navigator\n      screenLayout;\n\n    let element = (\n      <SceneView\n        navigation={navigation}\n        route={route}\n        screen={screen}\n        routeState={routeState}\n        getState={getState}\n        setState={setState}\n        options={customOptions}\n        clearOptions={clearOptions}\n      />\n    );\n\n    if (layout != null) {\n      element = layout({\n        route,\n        navigation,\n        // @ts-expect-error: in practice `theme` will be defined\n        theme,\n        children: element,\n      });\n    }\n\n    return (\n      <NavigationBuilderContext.Provider key={route.key} value={context}>\n        <NavigationContext.Provider value={navigation}>\n          <NavigationRouteContext.Provider value={route}>\n            {element}\n          </NavigationRouteContext.Provider>\n        </NavigationContext.Provider>\n      </NavigationBuilderContext.Provider>\n    );\n  };\n\n  const descriptors = routes.reduce<\n    Record<\n      string,\n      Descriptor<\n        ScreenOptions,\n        NavigationProp<\n          ParamListBase,\n          string,\n          string | undefined,\n          State,\n          ScreenOptions,\n          EventMap\n        > &\n          ActionHelpers,\n        RouteProp<ParamListBase>\n      >\n    >\n  >((acc, route, i) => {\n    const navigation = navigations[route.key];\n    const customOptions = getOptions(route, navigation, options[route.key]);\n    const element = render(\n      route,\n      navigation,\n      customOptions,\n      state.routes[i].state\n    );\n\n    acc[route.key] = {\n      route,\n      // @ts-expect-error: it's missing action helpers, fix later\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions as ScreenOptions,\n    };\n\n    return acc;\n  }, {});\n\n  /**\n   * Create a descriptor object for a route.\n   *\n   * @param route Route object for which the descriptor should be created\n   * @param placeholder Whether the descriptor should be a placeholder, e.g. for a route not yet in the state\n   * @returns Descriptor object\n   */\n  const describe = (route: RouteProp<ParamListBase>, placeholder: boolean) => {\n    if (!placeholder) {\n      if (!(route.key in descriptors)) {\n        throw new Error(`Couldn't find a route with the key ${route.key}.`);\n      }\n\n      return descriptors[route.key];\n    }\n\n    const navigation = base;\n    const customOptions = getOptions(route, navigation, {});\n    const element = render(route, navigation, customOptions, undefined);\n\n    return {\n      route,\n      navigation,\n      render() {\n        return element;\n      },\n      options: customOptions as ScreenOptions,\n    };\n  };\n\n  return {\n    describe,\n    descriptors,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":true},"sourceType":"script","externalDependencies":[]}